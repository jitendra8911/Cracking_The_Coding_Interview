{
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings/unique-characters-with-no-ds.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings/unique-characters-with-no-ds.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings/unique-characters-with-no-ds.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings/unique-characters-with-no-ds.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings",
        "sourceFileName": "unique-characters-with-no-ds.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _sort = require(\"../sorting/sort\");\n\n//const arr = [100,20,30,40,10,4,6];\nvar str = \"anasuya\";\nvar hasUniqueCharacters = true;\n\nfunction using_sort(str) {\n  var arr = (0, _sort.quickSort)(str.split(''), 0, str.length - 1);\n  var prevChar = arr[0];\n\n  for (var i = 1; i < arr.length; i++) {\n    var currChar = arr[i];\n\n    if (currChar === prevChar) {\n      hasUniqueCharacters = false;\n      break;\n    }\n\n    prevChar = currChar;\n  }\n\n  console.log(hasUniqueCharacters);\n}\n\nfunction using_bit_vector(str) {\n  var checker = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var val = str.charCodeAt(i) - 'a'.charCodeAt(0);\n\n    if ((checker & 1 << val) > 0) {\n      return false;\n    }\n\n    checker |= 1 << val;\n  }\n\n  return true;\n}\n\nconsole.log(using_bit_vector(str));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXF1ZS1jaGFyYWN0ZXJzLXdpdGgtbm8tZHMuanMiXSwibmFtZXMiOlsic3RyIiwiaGFzVW5pcXVlQ2hhcmFjdGVycyIsInVzaW5nX3NvcnQiLCJhcnIiLCJzcGxpdCIsImxlbmd0aCIsInByZXZDaGFyIiwiaSIsImN1cnJDaGFyIiwiY29uc29sZSIsImxvZyIsInVzaW5nX2JpdF92ZWN0b3IiLCJjaGVja2VyIiwidmFsIiwiY2hhckNvZGVBdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTtBQUNBLElBQU1BLEdBQUcsR0FBRyxTQUFaO0FBQ0EsSUFBSUMsbUJBQW1CLEdBQUcsSUFBMUI7O0FBQ0EsU0FBU0MsVUFBVCxDQUFvQkYsR0FBcEIsRUFBeUI7QUFDckIsTUFBTUcsR0FBRyxHQUFHLHFCQUFVSCxHQUFHLENBQUNJLEtBQUosQ0FBVSxFQUFWLENBQVYsRUFBeUIsQ0FBekIsRUFBNkJKLEdBQUcsQ0FBQ0ssTUFBSixHQUFXLENBQXhDLENBQVo7QUFDQSxNQUFJQyxRQUFRLEdBQUdILEdBQUcsQ0FBQyxDQUFELENBQWxCOztBQUVBLE9BQUssSUFBSUksQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osR0FBRyxDQUFDRSxNQUF4QixFQUFnQ0UsQ0FBQyxFQUFqQyxFQUFxQztBQUNqQyxRQUFJQyxRQUFRLEdBQUdMLEdBQUcsQ0FBQ0ksQ0FBRCxDQUFsQjs7QUFDQSxRQUFJQyxRQUFRLEtBQUtGLFFBQWpCLEVBQTJCO0FBQ3ZCTCxNQUFBQSxtQkFBbUIsR0FBRyxLQUF0QjtBQUNBO0FBQ0g7O0FBQ0RLLElBQUFBLFFBQVEsR0FBR0UsUUFBWDtBQUNIOztBQUNEQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWVQsbUJBQVo7QUFDSDs7QUFHRCxTQUFTVSxnQkFBVCxDQUEwQlgsR0FBMUIsRUFBK0I7QUFDM0IsTUFBSVksT0FBTyxHQUFHLENBQWQ7O0FBQ0EsT0FBSyxJQUFJTCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHUCxHQUFHLENBQUNLLE1BQXhCLEVBQWdDRSxDQUFDLEVBQWpDLEVBQXFDO0FBQ2pDLFFBQUlNLEdBQUcsR0FBR2IsR0FBRyxDQUFDYyxVQUFKLENBQWVQLENBQWYsSUFBb0IsSUFBSU8sVUFBSixDQUFlLENBQWYsQ0FBOUI7O0FBQ0EsUUFBSSxDQUFDRixPQUFPLEdBQUksS0FBS0MsR0FBakIsSUFBeUIsQ0FBN0IsRUFBZ0M7QUFDNUIsYUFBTyxLQUFQO0FBQ0g7O0FBQ0RELElBQUFBLE9BQU8sSUFBSyxLQUFLQyxHQUFqQjtBQUNIOztBQUVELFNBQU8sSUFBUDtBQUNIOztBQUVESixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsZ0JBQWdCLENBQUNYLEdBQUQsQ0FBNUIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ppdGVuZHJhL0RvY3VtZW50cy9wcm9qZWN0cy9DcmFja2luZ19UaGVfQ29kaW5nX0ludGVydmlldy9hcnJheXMtYW5kLXN0cmluZ3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3F1aWNrU29ydH0gZnJvbSBcIi4uL3NvcnRpbmcvc29ydFwiO1xuXG4vL2NvbnN0IGFyciA9IFsxMDAsMjAsMzAsNDAsMTAsNCw2XTtcbmNvbnN0IHN0ciA9IFwiYW5hc3V5YVwiO1xubGV0IGhhc1VuaXF1ZUNoYXJhY3RlcnMgPSB0cnVlO1xuZnVuY3Rpb24gdXNpbmdfc29ydChzdHIpIHtcbiAgICBjb25zdCBhcnIgPSBxdWlja1NvcnQoc3RyLnNwbGl0KCcnKSwgMCAsIHN0ci5sZW5ndGgtMSk7XG4gICAgbGV0IHByZXZDaGFyID0gYXJyWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGN1cnJDaGFyID0gYXJyW2ldO1xuICAgICAgICBpZiAoY3VyckNoYXIgPT09IHByZXZDaGFyKSB7XG4gICAgICAgICAgICBoYXNVbmlxdWVDaGFyYWN0ZXJzID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcmV2Q2hhciA9IGN1cnJDaGFyO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhoYXNVbmlxdWVDaGFyYWN0ZXJzKTtcbn1cblxuXG5mdW5jdGlvbiB1c2luZ19iaXRfdmVjdG9yKHN0cikge1xuICAgIGxldCBjaGVja2VyID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdmFsID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAnYScuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKChjaGVja2VyICYgKDEgPDwgdmFsKSkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tlciB8PSAoMSA8PCB2YWwpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5jb25zb2xlLmxvZyh1c2luZ19iaXRfdmVjdG9yKHN0cikpO1xuXG5cblxuIl19",
    "map": {
      "version": 3,
      "sources": [
        "unique-characters-with-no-ds.js"
      ],
      "names": [
        "str",
        "hasUniqueCharacters",
        "using_sort",
        "arr",
        "split",
        "length",
        "prevChar",
        "i",
        "currChar",
        "console",
        "log",
        "using_bit_vector",
        "checker",
        "val",
        "charCodeAt"
      ],
      "mappings": ";;AAAA;;AAEA;AACA,IAAMA,GAAG,GAAG,SAAZ;AACA,IAAIC,mBAAmB,GAAG,IAA1B;;AACA,SAASC,UAAT,CAAoBF,GAApB,EAAyB;AACrB,MAAMG,GAAG,GAAG,qBAAUH,GAAG,CAACI,KAAJ,CAAU,EAAV,CAAV,EAAyB,CAAzB,EAA6BJ,GAAG,CAACK,MAAJ,GAAW,CAAxC,CAAZ;AACA,MAAIC,QAAQ,GAAGH,GAAG,CAAC,CAAD,CAAlB;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACE,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,QAAIC,QAAQ,GAAGL,GAAG,CAACI,CAAD,CAAlB;;AACA,QAAIC,QAAQ,KAAKF,QAAjB,EAA2B;AACvBL,MAAAA,mBAAmB,GAAG,KAAtB;AACA;AACH;;AACDK,IAAAA,QAAQ,GAAGE,QAAX;AACH;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAYT,mBAAZ;AACH;;AAGD,SAASU,gBAAT,CAA0BX,GAA1B,EAA+B;AAC3B,MAAIY,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,GAAG,CAACK,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,QAAIM,GAAG,GAAGb,GAAG,CAACc,UAAJ,CAAeP,CAAf,IAAoB,IAAIO,UAAJ,CAAe,CAAf,CAA9B;;AACA,QAAI,CAACF,OAAO,GAAI,KAAKC,GAAjB,IAAyB,CAA7B,EAAgC;AAC5B,aAAO,KAAP;AACH;;AACDD,IAAAA,OAAO,IAAK,KAAKC,GAAjB;AACH;;AAED,SAAO,IAAP;AACH;;AAEDJ,OAAO,CAACC,GAAR,CAAYC,gBAAgB,CAACX,GAAD,CAA5B",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/arrays-and-strings",
      "sourcesContent": [
        "import {quickSort} from \"../sorting/sort\";\n\n//const arr = [100,20,30,40,10,4,6];\nconst str = \"anasuya\";\nlet hasUniqueCharacters = true;\nfunction using_sort(str) {\n    const arr = quickSort(str.split(''), 0 , str.length-1);\n    let prevChar = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        let currChar = arr[i];\n        if (currChar === prevChar) {\n            hasUniqueCharacters = false;\n            break;\n        }\n        prevChar = currChar;\n    }\n    console.log(hasUniqueCharacters);\n}\n\n\nfunction using_bit_vector(str) {\n    let checker = 0;\n    for (let i = 0; i < str.length; i++) {\n        let val = str.charCodeAt(i) - 'a'.charCodeAt(0);\n        if ((checker & (1 << val)) > 0) {\n            return false;\n        }\n        checker |= (1 << val);\n    }\n\n    return true;\n}\n\nconsole.log(using_bit_vector(str));\n\n\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1558907840836
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting/sort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting/sort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting/sort.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting/sort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting",
        "sourceFileName": "sort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.quickSort = quickSort;\n\nfunction quickSort(arr, low, high) {\n  if (low >= high) {\n    return;\n  }\n\n  var pivot = partition(arr, low, high);\n  quickSort(arr, low, pivot - 1);\n  quickSort(arr, pivot + 1, high);\n  return arr;\n}\n\nfunction partition(arr, low, high) {\n  var pivot = arr[high];\n  var i = low;\n\n  for (var j = low; j <= high - 1; j++) {\n    if (arr[j] <= pivot) {\n      var temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n      i++;\n    }\n  }\n\n  arr[high] = arr[i];\n  arr[i] = pivot;\n  return i;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvcnQuanMiXSwibmFtZXMiOlsicXVpY2tTb3J0IiwiYXJyIiwibG93IiwiaGlnaCIsInBpdm90IiwicGFydGl0aW9uIiwiaSIsImoiLCJ0ZW1wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ2UsU0FBU0EsU0FBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLEdBQXhCLEVBQTZCQyxJQUE3QixFQUFtQztBQUMxQyxNQUFJRCxHQUFHLElBQUlDLElBQVgsRUFBaUI7QUFDYjtBQUNIOztBQUNELE1BQUlDLEtBQUssR0FBR0MsU0FBUyxDQUFDSixHQUFELEVBQU1DLEdBQU4sRUFBV0MsSUFBWCxDQUFyQjtBQUNBSCxFQUFBQSxTQUFTLENBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFXRSxLQUFLLEdBQUMsQ0FBakIsQ0FBVDtBQUNBSixFQUFBQSxTQUFTLENBQUNDLEdBQUQsRUFBTUcsS0FBSyxHQUFDLENBQVosRUFBZUQsSUFBZixDQUFUO0FBRUEsU0FBT0YsR0FBUDtBQUNIOztBQUVBLFNBQVNJLFNBQVQsQ0FBbUJKLEdBQW5CLEVBQXdCQyxHQUF4QixFQUE2QkMsSUFBN0IsRUFBbUM7QUFDaEMsTUFBSUMsS0FBSyxHQUFHSCxHQUFHLENBQUNFLElBQUQsQ0FBZjtBQUNBLE1BQUlHLENBQUMsR0FBR0osR0FBUjs7QUFDQSxPQUFLLElBQUlLLENBQUMsR0FBR0wsR0FBYixFQUFrQkssQ0FBQyxJQUFJSixJQUFJLEdBQUcsQ0FBOUIsRUFBaUNJLENBQUMsRUFBbEMsRUFBc0M7QUFDbEMsUUFBSU4sR0FBRyxDQUFDTSxDQUFELENBQUgsSUFBVUgsS0FBZCxFQUFxQjtBQUNqQixVQUFJSSxJQUFJLEdBQUdQLEdBQUcsQ0FBQ00sQ0FBRCxDQUFkO0FBQ0FOLE1BQUFBLEdBQUcsQ0FBQ00sQ0FBRCxDQUFILEdBQVNOLEdBQUcsQ0FBQ0ssQ0FBRCxDQUFaO0FBQ0FMLE1BQUFBLEdBQUcsQ0FBQ0ssQ0FBRCxDQUFILEdBQVNFLElBQVQ7QUFDQUYsTUFBQUEsQ0FBQztBQUNKO0FBQ0o7O0FBQ0RMLEVBQUFBLEdBQUcsQ0FBQ0UsSUFBRCxDQUFILEdBQVlGLEdBQUcsQ0FBQ0ssQ0FBRCxDQUFmO0FBQ0FMLEVBQUFBLEdBQUcsQ0FBQ0ssQ0FBRCxDQUFILEdBQVNGLEtBQVQ7QUFFQSxTQUFPRSxDQUFQO0FBRUgiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ppdGVuZHJhL0RvY3VtZW50cy9wcm9qZWN0cy9DcmFja2luZ19UaGVfQ29kaW5nX0ludGVydmlldy9zb3J0aW5nIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIGV4cG9ydCBmdW5jdGlvbiBxdWlja1NvcnQoYXJyLCBsb3csIGhpZ2gpIHtcbiAgICAgICAgaWYgKGxvdyA+PSBoaWdoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBpdm90ID0gcGFydGl0aW9uKGFyciwgbG93LCBoaWdoKTtcbiAgICAgICAgcXVpY2tTb3J0KGFyciwgbG93LCBwaXZvdC0xKTtcbiAgICAgICAgcXVpY2tTb3J0KGFyciwgcGl2b3QrMSwgaGlnaCk7XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICAgZnVuY3Rpb24gcGFydGl0aW9uKGFyciwgbG93LCBoaWdoKSB7XG4gICAgICAgIGxldCBwaXZvdCA9IGFycltoaWdoXTtcbiAgICAgICAgbGV0IGkgPSBsb3c7XG4gICAgICAgIGZvciAobGV0IGogPSBsb3c7IGogPD0gaGlnaCAtIDE7IGorKykge1xuICAgICAgICAgICAgaWYgKGFycltqXSA8PSBwaXZvdCkge1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wID0gYXJyW2pdO1xuICAgICAgICAgICAgICAgIGFycltqXSA9IGFycltpXTtcbiAgICAgICAgICAgICAgICBhcnJbaV0gPSB0ZW1wO1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhcnJbaGlnaF0gPSBhcnJbaV07XG4gICAgICAgIGFycltpXSA9IHBpdm90O1xuXG4gICAgICAgIHJldHVybiBpO1xuXG4gICAgfVxuXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "sort.js"
      ],
      "names": [
        "quickSort",
        "arr",
        "low",
        "high",
        "pivot",
        "partition",
        "i",
        "j",
        "temp"
      ],
      "mappings": ";;;;;;;AACe,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AAC1C,MAAID,GAAG,IAAIC,IAAX,EAAiB;AACb;AACH;;AACD,MAAIC,KAAK,GAAGC,SAAS,CAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAArB;AACAH,EAAAA,SAAS,CAACC,GAAD,EAAMC,GAAN,EAAWE,KAAK,GAAC,CAAjB,CAAT;AACAJ,EAAAA,SAAS,CAACC,GAAD,EAAMG,KAAK,GAAC,CAAZ,EAAeD,IAAf,CAAT;AAEA,SAAOF,GAAP;AACH;;AAEA,SAASI,SAAT,CAAmBJ,GAAnB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AAChC,MAAIC,KAAK,GAAGH,GAAG,CAACE,IAAD,CAAf;AACA,MAAIG,CAAC,GAAGJ,GAAR;;AACA,OAAK,IAAIK,CAAC,GAAGL,GAAb,EAAkBK,CAAC,IAAIJ,IAAI,GAAG,CAA9B,EAAiCI,CAAC,EAAlC,EAAsC;AAClC,QAAIN,GAAG,CAACM,CAAD,CAAH,IAAUH,KAAd,EAAqB;AACjB,UAAII,IAAI,GAAGP,GAAG,CAACM,CAAD,CAAd;AACAN,MAAAA,GAAG,CAACM,CAAD,CAAH,GAASN,GAAG,CAACK,CAAD,CAAZ;AACAL,MAAAA,GAAG,CAACK,CAAD,CAAH,GAASE,IAAT;AACAF,MAAAA,CAAC;AACJ;AACJ;;AACDL,EAAAA,GAAG,CAACE,IAAD,CAAH,GAAYF,GAAG,CAACK,CAAD,CAAf;AACAL,EAAAA,GAAG,CAACK,CAAD,CAAH,GAASF,KAAT;AAEA,SAAOE,CAAP;AAEH",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/sorting",
      "sourcesContent": [
        "\n        export function quickSort(arr, low, high) {\n        if (low >= high) {\n            return;\n        }\n        let pivot = partition(arr, low, high);\n        quickSort(arr, low, pivot-1);\n        quickSort(arr, pivot+1, high);\n\n        return arr;\n    }\n\n     function partition(arr, low, high) {\n        let pivot = arr[high];\n        let i = low;\n        for (let j = low; j <= high - 1; j++) {\n            if (arr[j] <= pivot) {\n                let temp = arr[j];\n                arr[j] = arr[i];\n                arr[i] = temp;\n                i++;\n            }\n        }\n        arr[high] = arr[i];\n        arr[i] = pivot;\n\n        return i;\n\n    }\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1558903289532
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting/sort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting/sort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting/sort.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting/sort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting",
        "sourceFileName": "sort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.quickSort = quickSort;\nexports.mergeSort = mergeSort;\n\nfunction quickSort(arr) {\n  var low = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var high = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length - 1;\n\n  if (low >= high) {\n    return;\n  }\n\n  var pivot = partition(arr, low, high);\n  quickSort(arr, low, pivot - 1);\n  quickSort(arr, pivot + 1, high);\n  return arr;\n}\n\nfunction partition(arr, low, high) {\n  var pivot = arr[high];\n  var i = low;\n\n  for (var j = low; j <= high - 1; j++) {\n    if (arr[j] <= pivot) {\n      var temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n      i++;\n    }\n  }\n\n  arr[high] = arr[i];\n  arr[i] = pivot;\n  return i;\n}\n\nfunction mergeSort(arr) {\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length - 1;\n  var mid = Math.floor((end + start) / 2);\n\n  if (start < end) {\n    mergeSort(arr, start, mid);\n    mergeSort(arr, mid + 1, end);\n    merge(arr, start, mid, end);\n  }\n}\n\nfunction merge(arr, start, mid, end) {\n  var i = start;\n  var j = mid + 1;\n\n  while (i < end && j <= end) {\n    if (arr[i] < arr[j]) {\n      i++;\n    } else {\n      var temp = arr[j];\n\n      for (var k = j; k > i; k--) {\n        arr[k] = arr[k - 1];\n      }\n\n      arr[i] = temp; // let temp1 = arr[j];\n      // let temp2 = arr[i];\n      // arr[j] = arr[j-1];\n      // arr[i] = temp1;\n      // arr[i+1] = temp2;\n\n      i++;\n      j++;\n    }\n  }\n}\n\nvar arr = [1000, 300, 7000, 300, 7000, 1000, 10, 3, 2, 7, 5, 90, 871, 256, 752, 752, 3, 2];\nmergeSort(arr);\nconsole.log(arr);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNvcnQuanMiXSwibmFtZXMiOlsicXVpY2tTb3J0IiwiYXJyIiwibG93IiwiaGlnaCIsImxlbmd0aCIsInBpdm90IiwicGFydGl0aW9uIiwiaSIsImoiLCJ0ZW1wIiwibWVyZ2VTb3J0Iiwic3RhcnQiLCJlbmQiLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJtZXJnZSIsImsiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNPLFNBQVNBLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdEO0FBQUEsTUFBaENDLEdBQWdDLHVFQUExQixDQUEwQjtBQUFBLE1BQXZCQyxJQUF1Qix1RUFBaEJGLEdBQUcsQ0FBQ0csTUFBSixHQUFhLENBQUc7O0FBQzNELE1BQUlGLEdBQUcsSUFBSUMsSUFBWCxFQUFpQjtBQUNiO0FBQ0g7O0FBQ0QsTUFBSUUsS0FBSyxHQUFHQyxTQUFTLENBQUNMLEdBQUQsRUFBT0MsR0FBUCxFQUFZQyxJQUFaLENBQXJCO0FBQ0FILEVBQUFBLFNBQVMsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdHLEtBQUssR0FBRyxDQUFuQixDQUFUO0FBQ0FMLEVBQUFBLFNBQVMsQ0FBQ0MsR0FBRCxFQUFNSSxLQUFLLEdBQUcsQ0FBZCxFQUFpQkYsSUFBakIsQ0FBVDtBQUVBLFNBQU9GLEdBQVA7QUFDSDs7QUFFRCxTQUFTSyxTQUFULENBQW1CTCxHQUFuQixFQUF3QkMsR0FBeEIsRUFBNkJDLElBQTdCLEVBQW1DO0FBQy9CLE1BQUlFLEtBQUssR0FBR0osR0FBRyxDQUFDRSxJQUFELENBQWY7QUFDQSxNQUFJSSxDQUFDLEdBQUdMLEdBQVI7O0FBQ0EsT0FBSyxJQUFJTSxDQUFDLEdBQUdOLEdBQWIsRUFBa0JNLENBQUMsSUFBSUwsSUFBSSxHQUFHLENBQTlCLEVBQWlDSyxDQUFDLEVBQWxDLEVBQXNDO0FBQ2xDLFFBQUlQLEdBQUcsQ0FBQ08sQ0FBRCxDQUFILElBQVVILEtBQWQsRUFBcUI7QUFDakIsVUFBSUksSUFBSSxHQUFHUixHQUFHLENBQUNPLENBQUQsQ0FBZDtBQUNBUCxNQUFBQSxHQUFHLENBQUNPLENBQUQsQ0FBSCxHQUFTUCxHQUFHLENBQUNNLENBQUQsQ0FBWjtBQUNBTixNQUFBQSxHQUFHLENBQUNNLENBQUQsQ0FBSCxHQUFTRSxJQUFUO0FBQ0FGLE1BQUFBLENBQUM7QUFDSjtBQUNKOztBQUNETixFQUFBQSxHQUFHLENBQUNFLElBQUQsQ0FBSCxHQUFZRixHQUFHLENBQUNNLENBQUQsQ0FBZjtBQUNBTixFQUFBQSxHQUFHLENBQUNNLENBQUQsQ0FBSCxHQUFTRixLQUFUO0FBRUEsU0FBT0UsQ0FBUDtBQUVIOztBQUdNLFNBQVNHLFNBQVQsQ0FBbUJULEdBQW5CLEVBQXlEO0FBQUEsTUFBakNVLEtBQWlDLHVFQUF6QixDQUF5QjtBQUFBLE1BQXRCQyxHQUFzQix1RUFBaEJYLEdBQUcsQ0FBQ0csTUFBSixHQUFhLENBQUc7QUFDNUQsTUFBSVMsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDSCxHQUFHLEdBQUdELEtBQVAsSUFBYyxDQUF6QixDQUFWOztBQUNBLE1BQUlBLEtBQUssR0FBR0MsR0FBWixFQUFpQjtBQUNiRixJQUFBQSxTQUFTLENBQUNULEdBQUQsRUFBTVUsS0FBTixFQUFhRSxHQUFiLENBQVQ7QUFDQUgsSUFBQUEsU0FBUyxDQUFDVCxHQUFELEVBQU1ZLEdBQUcsR0FBRyxDQUFaLEVBQWVELEdBQWYsQ0FBVDtBQUNBSSxJQUFBQSxLQUFLLENBQUNmLEdBQUQsRUFBTVUsS0FBTixFQUFhRSxHQUFiLEVBQWtCRCxHQUFsQixDQUFMO0FBQ0g7QUFDSjs7QUFFRCxTQUFTSSxLQUFULENBQWVmLEdBQWYsRUFBb0JVLEtBQXBCLEVBQTJCRSxHQUEzQixFQUFnQ0QsR0FBaEMsRUFBcUM7QUFDakMsTUFBSUwsQ0FBQyxHQUFHSSxLQUFSO0FBQ0EsTUFBSUgsQ0FBQyxHQUFHSyxHQUFHLEdBQUMsQ0FBWjs7QUFFQSxTQUFPTixDQUFDLEdBQUdLLEdBQUosSUFBV0osQ0FBQyxJQUFJSSxHQUF2QixFQUE0QjtBQUN4QixRQUFJWCxHQUFHLENBQUNNLENBQUQsQ0FBSCxHQUFTTixHQUFHLENBQUNPLENBQUQsQ0FBaEIsRUFBcUI7QUFDakJELE1BQUFBLENBQUM7QUFDSixLQUZELE1BR0s7QUFDRCxVQUFJRSxJQUFJLEdBQUdSLEdBQUcsQ0FBQ08sQ0FBRCxDQUFkOztBQUNBLFdBQUssSUFBSVMsQ0FBQyxHQUFHVCxDQUFiLEVBQWdCUyxDQUFDLEdBQUdWLENBQXBCLEVBQXVCVSxDQUFDLEVBQXhCLEVBQTRCO0FBQ3hCaEIsUUFBQUEsR0FBRyxDQUFDZ0IsQ0FBRCxDQUFILEdBQVNoQixHQUFHLENBQUNnQixDQUFDLEdBQUMsQ0FBSCxDQUFaO0FBQ0g7O0FBQ0RoQixNQUFBQSxHQUFHLENBQUNNLENBQUQsQ0FBSCxHQUFTRSxJQUFULENBTEMsQ0FNRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBRixNQUFBQSxDQUFDO0FBQ0RDLE1BQUFBLENBQUM7QUFDSjtBQUNKO0FBRUo7O0FBRUQsSUFBSVAsR0FBRyxHQUFHLENBQUMsSUFBRCxFQUFPLEdBQVAsRUFBWSxJQUFaLEVBQWlCLEdBQWpCLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLEVBQStCLEVBQS9CLEVBQWtDLENBQWxDLEVBQW9DLENBQXBDLEVBQXNDLENBQXRDLEVBQXdDLENBQXhDLEVBQTBDLEVBQTFDLEVBQTZDLEdBQTdDLEVBQWlELEdBQWpELEVBQXFELEdBQXJELEVBQXlELEdBQXpELEVBQTZELENBQTdELEVBQStELENBQS9ELENBQVY7QUFDQVMsU0FBUyxDQUFDVCxHQUFELENBQVQ7QUFDQWlCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZbEIsR0FBWiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvaml0ZW5kcmEvRG9jdW1lbnRzL3Byb2plY3RzL0NyYWNraW5nX1RoZV9Db2RpbmdfSW50ZXJ2aWV3L3NyYy9zb3J0aW5nIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZnVuY3Rpb24gcXVpY2tTb3J0KGFyciwgbG93ID0gMCwgaGlnaCA9IGFyci5sZW5ndGggLSAxKSB7XG4gICAgaWYgKGxvdyA+PSBoaWdoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHBpdm90ID0gcGFydGl0aW9uKGFyciwgIGxvdywgaGlnaCk7XG4gICAgcXVpY2tTb3J0KGFyciwgbG93LCBwaXZvdCAtIDEpO1xuICAgIHF1aWNrU29ydChhcnIsIHBpdm90ICsgMSwgaGlnaCk7XG5cbiAgICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBwYXJ0aXRpb24oYXJyLCBsb3csIGhpZ2gpIHtcbiAgICBsZXQgcGl2b3QgPSBhcnJbaGlnaF07XG4gICAgbGV0IGkgPSBsb3c7XG4gICAgZm9yIChsZXQgaiA9IGxvdzsgaiA8PSBoaWdoIC0gMTsgaisrKSB7XG4gICAgICAgIGlmIChhcnJbal0gPD0gcGl2b3QpIHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gYXJyW2pdO1xuICAgICAgICAgICAgYXJyW2pdID0gYXJyW2ldO1xuICAgICAgICAgICAgYXJyW2ldID0gdGVtcDtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBhcnJbaGlnaF0gPSBhcnJbaV07XG4gICAgYXJyW2ldID0gcGl2b3Q7XG5cbiAgICByZXR1cm4gaTtcblxufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNvcnQoYXJyLCBzdGFydCA9IDAsIGVuZCA9IGFyci5sZW5ndGggLSAxKSB7XG4gICAgbGV0IG1pZCA9IE1hdGguZmxvb3IoKGVuZCArIHN0YXJ0KS8yKTtcbiAgICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgbWVyZ2VTb3J0KGFyciwgc3RhcnQsIG1pZCk7XG4gICAgICAgIG1lcmdlU29ydChhcnIsIG1pZCArIDEsIGVuZCk7XG4gICAgICAgIG1lcmdlKGFyciwgc3RhcnQsIG1pZCwgZW5kKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGFyciwgc3RhcnQsIG1pZCwgZW5kKSB7XG4gICAgbGV0IGkgPSBzdGFydDtcbiAgICBsZXQgaiA9IG1pZCsxO1xuXG4gICAgd2hpbGUgKGkgPCBlbmQgJiYgaiA8PSBlbmQpIHtcbiAgICAgICAgaWYgKGFycltpXSA8IGFycltqXSkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRlbXAgPSBhcnJbal07XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gajsgayA+IGk7IGstLSkge1xuICAgICAgICAgICAgICAgIGFycltrXSA9IGFycltrLTFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJyW2ldID0gdGVtcDtcbiAgICAgICAgICAgIC8vIGxldCB0ZW1wMSA9IGFycltqXTtcbiAgICAgICAgICAgIC8vIGxldCB0ZW1wMiA9IGFycltpXTtcbiAgICAgICAgICAgIC8vIGFycltqXSA9IGFycltqLTFdO1xuICAgICAgICAgICAgLy8gYXJyW2ldID0gdGVtcDE7XG4gICAgICAgICAgICAvLyBhcnJbaSsxXSA9IHRlbXAyO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmxldCBhcnIgPSBbMTAwMCwgMzAwLCA3MDAwLDMwMCw3MDAwLDEwMDAsMTAsMywyLDcsNSw5MCw4NzEsMjU2LDc1Miw3NTIsMywyXTtcbm1lcmdlU29ydChhcnIpO1xuY29uc29sZS5sb2coYXJyKTtcblxuXG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "sort.js"
      ],
      "names": [
        "quickSort",
        "arr",
        "low",
        "high",
        "length",
        "pivot",
        "partition",
        "i",
        "j",
        "temp",
        "mergeSort",
        "start",
        "end",
        "mid",
        "Math",
        "floor",
        "merge",
        "k",
        "console",
        "log"
      ],
      "mappings": ";;;;;;;;AACO,SAASA,SAAT,CAAmBC,GAAnB,EAAwD;AAAA,MAAhCC,GAAgC,uEAA1B,CAA0B;AAAA,MAAvBC,IAAuB,uEAAhBF,GAAG,CAACG,MAAJ,GAAa,CAAG;;AAC3D,MAAIF,GAAG,IAAIC,IAAX,EAAiB;AACb;AACH;;AACD,MAAIE,KAAK,GAAGC,SAAS,CAACL,GAAD,EAAOC,GAAP,EAAYC,IAAZ,CAArB;AACAH,EAAAA,SAAS,CAACC,GAAD,EAAMC,GAAN,EAAWG,KAAK,GAAG,CAAnB,CAAT;AACAL,EAAAA,SAAS,CAACC,GAAD,EAAMI,KAAK,GAAG,CAAd,EAAiBF,IAAjB,CAAT;AAEA,SAAOF,GAAP;AACH;;AAED,SAASK,SAAT,CAAmBL,GAAnB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AAC/B,MAAIE,KAAK,GAAGJ,GAAG,CAACE,IAAD,CAAf;AACA,MAAII,CAAC,GAAGL,GAAR;;AACA,OAAK,IAAIM,CAAC,GAAGN,GAAb,EAAkBM,CAAC,IAAIL,IAAI,GAAG,CAA9B,EAAiCK,CAAC,EAAlC,EAAsC;AAClC,QAAIP,GAAG,CAACO,CAAD,CAAH,IAAUH,KAAd,EAAqB;AACjB,UAAII,IAAI,GAAGR,GAAG,CAACO,CAAD,CAAd;AACAP,MAAAA,GAAG,CAACO,CAAD,CAAH,GAASP,GAAG,CAACM,CAAD,CAAZ;AACAN,MAAAA,GAAG,CAACM,CAAD,CAAH,GAASE,IAAT;AACAF,MAAAA,CAAC;AACJ;AACJ;;AACDN,EAAAA,GAAG,CAACE,IAAD,CAAH,GAAYF,GAAG,CAACM,CAAD,CAAf;AACAN,EAAAA,GAAG,CAACM,CAAD,CAAH,GAASF,KAAT;AAEA,SAAOE,CAAP;AAEH;;AAGM,SAASG,SAAT,CAAmBT,GAAnB,EAAyD;AAAA,MAAjCU,KAAiC,uEAAzB,CAAyB;AAAA,MAAtBC,GAAsB,uEAAhBX,GAAG,CAACG,MAAJ,GAAa,CAAG;AAC5D,MAAIS,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACH,GAAG,GAAGD,KAAP,IAAc,CAAzB,CAAV;;AACA,MAAIA,KAAK,GAAGC,GAAZ,EAAiB;AACbF,IAAAA,SAAS,CAACT,GAAD,EAAMU,KAAN,EAAaE,GAAb,CAAT;AACAH,IAAAA,SAAS,CAACT,GAAD,EAAMY,GAAG,GAAG,CAAZ,EAAeD,GAAf,CAAT;AACAI,IAAAA,KAAK,CAACf,GAAD,EAAMU,KAAN,EAAaE,GAAb,EAAkBD,GAAlB,CAAL;AACH;AACJ;;AAED,SAASI,KAAT,CAAef,GAAf,EAAoBU,KAApB,EAA2BE,GAA3B,EAAgCD,GAAhC,EAAqC;AACjC,MAAIL,CAAC,GAAGI,KAAR;AACA,MAAIH,CAAC,GAAGK,GAAG,GAAC,CAAZ;;AAEA,SAAON,CAAC,GAAGK,GAAJ,IAAWJ,CAAC,IAAII,GAAvB,EAA4B;AACxB,QAAIX,GAAG,CAACM,CAAD,CAAH,GAASN,GAAG,CAACO,CAAD,CAAhB,EAAqB;AACjBD,MAAAA,CAAC;AACJ,KAFD,MAGK;AACD,UAAIE,IAAI,GAAGR,GAAG,CAACO,CAAD,CAAd;;AACA,WAAK,IAAIS,CAAC,GAAGT,CAAb,EAAgBS,CAAC,GAAGV,CAApB,EAAuBU,CAAC,EAAxB,EAA4B;AACxBhB,QAAAA,GAAG,CAACgB,CAAD,CAAH,GAAShB,GAAG,CAACgB,CAAC,GAAC,CAAH,CAAZ;AACH;;AACDhB,MAAAA,GAAG,CAACM,CAAD,CAAH,GAASE,IAAT,CALC,CAMD;AACA;AACA;AACA;AACA;;AACAF,MAAAA,CAAC;AACDC,MAAAA,CAAC;AACJ;AACJ;AAEJ;;AAED,IAAIP,GAAG,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,IAAZ,EAAiB,GAAjB,EAAqB,IAArB,EAA0B,IAA1B,EAA+B,EAA/B,EAAkC,CAAlC,EAAoC,CAApC,EAAsC,CAAtC,EAAwC,CAAxC,EAA0C,EAA1C,EAA6C,GAA7C,EAAiD,GAAjD,EAAqD,GAArD,EAAyD,GAAzD,EAA6D,CAA7D,EAA+D,CAA/D,CAAV;AACAS,SAAS,CAACT,GAAD,CAAT;AACAiB,OAAO,CAACC,GAAR,CAAYlB,GAAZ",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/sorting",
      "sourcesContent": [
        "\nexport function quickSort(arr, low = 0, high = arr.length - 1) {\n    if (low >= high) {\n        return;\n    }\n    let pivot = partition(arr,  low, high);\n    quickSort(arr, low, pivot - 1);\n    quickSort(arr, pivot + 1, high);\n\n    return arr;\n}\n\nfunction partition(arr, low, high) {\n    let pivot = arr[high];\n    let i = low;\n    for (let j = low; j <= high - 1; j++) {\n        if (arr[j] <= pivot) {\n            let temp = arr[j];\n            arr[j] = arr[i];\n            arr[i] = temp;\n            i++;\n        }\n    }\n    arr[high] = arr[i];\n    arr[i] = pivot;\n\n    return i;\n\n}\n\n\nexport function mergeSort(arr, start = 0, end = arr.length - 1) {\n    let mid = Math.floor((end + start)/2);\n    if (start < end) {\n        mergeSort(arr, start, mid);\n        mergeSort(arr, mid + 1, end);\n        merge(arr, start, mid, end);\n    }\n}\n\nfunction merge(arr, start, mid, end) {\n    let i = start;\n    let j = mid+1;\n\n    while (i < end && j <= end) {\n        if (arr[i] < arr[j]) {\n            i++;\n        }\n        else {\n            let temp = arr[j];\n            for (let k = j; k > i; k--) {\n                arr[k] = arr[k-1];\n            }\n            arr[i] = temp;\n            // let temp1 = arr[j];\n            // let temp2 = arr[i];\n            // arr[j] = arr[j-1];\n            // arr[i] = temp1;\n            // arr[i+1] = temp2;\n            i++;\n            j++;\n        }\n    }\n\n}\n\nlet arr = [1000, 300, 7000,300,7000,1000,10,3,2,7,5,90,871,256,752,752,3,2];\nmergeSort(arr);\nconsole.log(arr);\n\n\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1559417812616
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/unique-characters-with-no-ds.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/unique-characters-with-no-ds.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/unique-characters-with-no-ds.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/unique-characters-with-no-ds.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "unique-characters-with-no-ds.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _sort = require(\"../sorting/sort\");\n\nvar str = \"anasuya\";\nvar hasUniqueCharacters = true;\n\nfunction using_quick_sort(str) {\n  var arr = (0, _sort.quickSort)(str.split(''));\n  var prevChar = arr[0];\n\n  for (var i = 1; i < arr.length; i++) {\n    var currChar = arr[i];\n\n    if (currChar === prevChar) {\n      hasUniqueCharacters = false;\n      break;\n    }\n\n    prevChar = currChar;\n  }\n\n  return hasUniqueCharacters;\n}\n\nfunction using_bit_vector(str) {\n  var checker = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var val = str.charCodeAt(i) - 'a'.charCodeAt(0);\n\n    if ((checker & 1 << val) > 0) {\n      return false;\n    }\n\n    checker |= 1 << val;\n  }\n\n  return true;\n} //console.log(using_bit_vector(str));\n\n\nconsole.log(using_quick_sort(str));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaXF1ZS1jaGFyYWN0ZXJzLXdpdGgtbm8tZHMuanMiXSwibmFtZXMiOlsic3RyIiwiaGFzVW5pcXVlQ2hhcmFjdGVycyIsInVzaW5nX3F1aWNrX3NvcnQiLCJhcnIiLCJzcGxpdCIsInByZXZDaGFyIiwiaSIsImxlbmd0aCIsImN1cnJDaGFyIiwidXNpbmdfYml0X3ZlY3RvciIsImNoZWNrZXIiLCJ2YWwiLCJjaGFyQ29kZUF0IiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQSxJQUFNQSxHQUFHLEdBQUcsU0FBWjtBQUNBLElBQUlDLG1CQUFtQixHQUFHLElBQTFCOztBQUNBLFNBQVNDLGdCQUFULENBQTBCRixHQUExQixFQUErQjtBQUMzQixNQUFNRyxHQUFHLEdBQUcscUJBQVVILEdBQUcsQ0FBQ0ksS0FBSixDQUFVLEVBQVYsQ0FBVixDQUFaO0FBQ0EsTUFBSUMsUUFBUSxHQUFHRixHQUFHLENBQUMsQ0FBRCxDQUFsQjs7QUFFQSxPQUFLLElBQUlHLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILEdBQUcsQ0FBQ0ksTUFBeEIsRUFBZ0NELENBQUMsRUFBakMsRUFBcUM7QUFDakMsUUFBSUUsUUFBUSxHQUFHTCxHQUFHLENBQUNHLENBQUQsQ0FBbEI7O0FBQ0EsUUFBSUUsUUFBUSxLQUFLSCxRQUFqQixFQUEyQjtBQUN2QkosTUFBQUEsbUJBQW1CLEdBQUcsS0FBdEI7QUFDQTtBQUNIOztBQUNESSxJQUFBQSxRQUFRLEdBQUdHLFFBQVg7QUFDSDs7QUFDRCxTQUFPUCxtQkFBUDtBQUNIOztBQUdELFNBQVNRLGdCQUFULENBQTBCVCxHQUExQixFQUErQjtBQUMzQixNQUFJVSxPQUFPLEdBQUcsQ0FBZDs7QUFDQSxPQUFLLElBQUlKLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdOLEdBQUcsQ0FBQ08sTUFBeEIsRUFBZ0NELENBQUMsRUFBakMsRUFBcUM7QUFDakMsUUFBSUssR0FBRyxHQUFHWCxHQUFHLENBQUNZLFVBQUosQ0FBZU4sQ0FBZixJQUFvQixJQUFJTSxVQUFKLENBQWUsQ0FBZixDQUE5Qjs7QUFDQSxRQUFJLENBQUNGLE9BQU8sR0FBSSxLQUFLQyxHQUFqQixJQUF5QixDQUE3QixFQUFnQztBQUM1QixhQUFPLEtBQVA7QUFDSDs7QUFDREQsSUFBQUEsT0FBTyxJQUFLLEtBQUtDLEdBQWpCO0FBQ0g7O0FBRUQsU0FBTyxJQUFQO0FBQ0gsQyxDQUVEOzs7QUFFQUUsT0FBTyxDQUFDQyxHQUFSLENBQVlaLGdCQUFnQixDQUFDRixHQUFELENBQTVCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qaXRlbmRyYS9Eb2N1bWVudHMvcHJvamVjdHMvQ3JhY2tpbmdfVGhlX0NvZGluZ19JbnRlcnZpZXcvc3JjL2FycmF5cy1hbmQtc3RyaW5ncyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cXVpY2tTb3J0fSBmcm9tIFwiLi4vc29ydGluZy9zb3J0XCI7XG5cbmNvbnN0IHN0ciA9IFwiYW5hc3V5YVwiO1xubGV0IGhhc1VuaXF1ZUNoYXJhY3RlcnMgPSB0cnVlO1xuZnVuY3Rpb24gdXNpbmdfcXVpY2tfc29ydChzdHIpIHtcbiAgICBjb25zdCBhcnIgPSBxdWlja1NvcnQoc3RyLnNwbGl0KCcnKSk7XG4gICAgbGV0IHByZXZDaGFyID0gYXJyWzBdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGN1cnJDaGFyID0gYXJyW2ldO1xuICAgICAgICBpZiAoY3VyckNoYXIgPT09IHByZXZDaGFyKSB7XG4gICAgICAgICAgICBoYXNVbmlxdWVDaGFyYWN0ZXJzID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBwcmV2Q2hhciA9IGN1cnJDaGFyO1xuICAgIH1cbiAgICByZXR1cm4gaGFzVW5pcXVlQ2hhcmFjdGVycztcbn1cblxuXG5mdW5jdGlvbiB1c2luZ19iaXRfdmVjdG9yKHN0cikge1xuICAgIGxldCBjaGVja2VyID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdmFsID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAnYScuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgaWYgKChjaGVja2VyICYgKDEgPDwgdmFsKSkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tlciB8PSAoMSA8PCB2YWwpO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG4vL2NvbnNvbGUubG9nKHVzaW5nX2JpdF92ZWN0b3Ioc3RyKSk7XG5cbmNvbnNvbGUubG9nKHVzaW5nX3F1aWNrX3NvcnQoc3RyKSk7XG5cblxuXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "unique-characters-with-no-ds.js"
      ],
      "names": [
        "str",
        "hasUniqueCharacters",
        "using_quick_sort",
        "arr",
        "split",
        "prevChar",
        "i",
        "length",
        "currChar",
        "using_bit_vector",
        "checker",
        "val",
        "charCodeAt",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AAEA,IAAMA,GAAG,GAAG,SAAZ;AACA,IAAIC,mBAAmB,GAAG,IAA1B;;AACA,SAASC,gBAAT,CAA0BF,GAA1B,EAA+B;AAC3B,MAAMG,GAAG,GAAG,qBAAUH,GAAG,CAACI,KAAJ,CAAU,EAAV,CAAV,CAAZ;AACA,MAAIC,QAAQ,GAAGF,GAAG,CAAC,CAAD,CAAlB;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIE,QAAQ,GAAGL,GAAG,CAACG,CAAD,CAAlB;;AACA,QAAIE,QAAQ,KAAKH,QAAjB,EAA2B;AACvBJ,MAAAA,mBAAmB,GAAG,KAAtB;AACA;AACH;;AACDI,IAAAA,QAAQ,GAAGG,QAAX;AACH;;AACD,SAAOP,mBAAP;AACH;;AAGD,SAASQ,gBAAT,CAA0BT,GAA1B,EAA+B;AAC3B,MAAIU,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIK,GAAG,GAAGX,GAAG,CAACY,UAAJ,CAAeN,CAAf,IAAoB,IAAIM,UAAJ,CAAe,CAAf,CAA9B;;AACA,QAAI,CAACF,OAAO,GAAI,KAAKC,GAAjB,IAAyB,CAA7B,EAAgC;AAC5B,aAAO,KAAP;AACH;;AACDD,IAAAA,OAAO,IAAK,KAAKC,GAAjB;AACH;;AAED,SAAO,IAAP;AACH,C,CAED;;;AAEAE,OAAO,CAACC,GAAR,CAAYZ,gBAAgB,CAACF,GAAD,CAA5B",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "import {quickSort} from \"../sorting/sort\";\n\nconst str = \"anasuya\";\nlet hasUniqueCharacters = true;\nfunction using_quick_sort(str) {\n    const arr = quickSort(str.split(''));\n    let prevChar = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        let currChar = arr[i];\n        if (currChar === prevChar) {\n            hasUniqueCharacters = false;\n            break;\n        }\n        prevChar = currChar;\n    }\n    return hasUniqueCharacters;\n}\n\n\nfunction using_bit_vector(str) {\n    let checker = 0;\n    for (let i = 0; i < str.length; i++) {\n        let val = str.charCodeAt(i) - 'a'.charCodeAt(0);\n        if ((checker & (1 << val)) > 0) {\n            return false;\n        }\n        checker |= (1 << val);\n    }\n\n    return true;\n}\n\n//console.log(using_bit_vector(str));\n\nconsole.log(using_quick_sort(str));\n\n\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1558914703208
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests/merge-sort.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests/merge-sort.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests/merge-sort.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests/merge-sort.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests",
        "sourceFileName": "merge-sort.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar arr = [1, 3, 9, 10, 7, 11, 13];\nvar start = 0;\nvar end = arr.length - 1;\nvar mid = Math.floor((arr.length - start) / 2); // let left = arr.slice(start, mid);\n// let right = arr.slice(mid, end);\n\nvar i = start;\nvar j = mid + 1;\n\nwhile (i <= mid && j <= end) {\n  if (arr[i] < arr[j]) {\n    i++;\n  } else {\n    var temp1 = arr[j];\n    var temp2 = arr[i];\n    arr[j] = arr[j - 1];\n    arr[i] = temp1;\n    arr[i + 1] = temp2;\n    i++;\n    j++;\n  }\n}\n\nconsole.log(arr);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlLXNvcnQuanMiXSwibmFtZXMiOlsiYXJyIiwic3RhcnQiLCJlbmQiLCJsZW5ndGgiLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJpIiwiaiIsInRlbXAxIiwidGVtcDIiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLEdBQUcsR0FBRyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLEVBQVAsRUFBVSxDQUFWLEVBQVksRUFBWixFQUFlLEVBQWYsQ0FBVjtBQUNBLElBQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsSUFBSUMsR0FBRyxHQUFHRixHQUFHLENBQUNHLE1BQUosR0FBVyxDQUFyQjtBQUNBLElBQUlDLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVcsQ0FBQ04sR0FBRyxDQUFDRyxNQUFKLEdBQWFGLEtBQWQsSUFBcUIsQ0FBaEMsQ0FBVixDLENBR0E7QUFDQTs7QUFHQSxJQUFJTSxDQUFDLEdBQUdOLEtBQVI7QUFDQSxJQUFJTyxDQUFDLEdBQUdKLEdBQUcsR0FBQyxDQUFaOztBQUVBLE9BQU9HLENBQUMsSUFBSUgsR0FBTCxJQUFZSSxDQUFDLElBQUlOLEdBQXhCLEVBQTZCO0FBQ3pCLE1BQUlGLEdBQUcsQ0FBQ08sQ0FBRCxDQUFILEdBQVNQLEdBQUcsQ0FBQ1EsQ0FBRCxDQUFoQixFQUFxQjtBQUNqQkQsSUFBQUEsQ0FBQztBQUNKLEdBRkQsTUFHSztBQUNELFFBQUlFLEtBQUssR0FBR1QsR0FBRyxDQUFDUSxDQUFELENBQWY7QUFDQSxRQUFJRSxLQUFLLEdBQUdWLEdBQUcsQ0FBQ08sQ0FBRCxDQUFmO0FBQ0FQLElBQUFBLEdBQUcsQ0FBQ1EsQ0FBRCxDQUFILEdBQVNSLEdBQUcsQ0FBQ1EsQ0FBQyxHQUFDLENBQUgsQ0FBWjtBQUNBUixJQUFBQSxHQUFHLENBQUNPLENBQUQsQ0FBSCxHQUFTRSxLQUFUO0FBQ0FULElBQUFBLEdBQUcsQ0FBQ08sQ0FBQyxHQUFDLENBQUgsQ0FBSCxHQUFXRyxLQUFYO0FBQ0FILElBQUFBLENBQUM7QUFDREMsSUFBQUEsQ0FBQztBQUNKO0FBQ0o7O0FBRURHLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWixHQUFaIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qaXRlbmRyYS9Eb2N1bWVudHMvcHJvamVjdHMvQ3JhY2tpbmdfVGhlX0NvZGluZ19JbnRlcnZpZXcvc3JjL3Rlc3RzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGFyciA9IFsxLDMsOSwxMCw3LDExLDEzXTtcbmxldCBzdGFydCA9IDA7XG5sZXQgZW5kID0gYXJyLmxlbmd0aC0xO1xubGV0IG1pZCA9IE1hdGguZmxvb3IoKGFyci5sZW5ndGggLSBzdGFydCkvMik7XG5cblxuLy8gbGV0IGxlZnQgPSBhcnIuc2xpY2Uoc3RhcnQsIG1pZCk7XG4vLyBsZXQgcmlnaHQgPSBhcnIuc2xpY2UobWlkLCBlbmQpO1xuXG5cbmxldCBpID0gc3RhcnQ7XG5sZXQgaiA9IG1pZCsxO1xuXG53aGlsZSAoaSA8PSBtaWQgJiYgaiA8PSBlbmQpIHtcbiAgICBpZiAoYXJyW2ldIDwgYXJyW2pdKSB7XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCB0ZW1wMSA9IGFycltqXTtcbiAgICAgICAgbGV0IHRlbXAyID0gYXJyW2ldO1xuICAgICAgICBhcnJbal0gPSBhcnJbai0xXTtcbiAgICAgICAgYXJyW2ldID0gdGVtcDE7XG4gICAgICAgIGFycltpKzFdID0gdGVtcDI7XG4gICAgICAgIGkrKztcbiAgICAgICAgaisrO1xuICAgIH1cbn1cblxuY29uc29sZS5sb2coYXJyKTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "merge-sort.js"
      ],
      "names": [
        "arr",
        "start",
        "end",
        "length",
        "mid",
        "Math",
        "floor",
        "i",
        "j",
        "temp1",
        "temp2",
        "console",
        "log"
      ],
      "mappings": ";;AAAA,IAAIA,GAAG,GAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,EAAP,EAAU,CAAV,EAAY,EAAZ,EAAe,EAAf,CAAV;AACA,IAAIC,KAAK,GAAG,CAAZ;AACA,IAAIC,GAAG,GAAGF,GAAG,CAACG,MAAJ,GAAW,CAArB;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACN,GAAG,CAACG,MAAJ,GAAaF,KAAd,IAAqB,CAAhC,CAAV,C,CAGA;AACA;;AAGA,IAAIM,CAAC,GAAGN,KAAR;AACA,IAAIO,CAAC,GAAGJ,GAAG,GAAC,CAAZ;;AAEA,OAAOG,CAAC,IAAIH,GAAL,IAAYI,CAAC,IAAIN,GAAxB,EAA6B;AACzB,MAAIF,GAAG,CAACO,CAAD,CAAH,GAASP,GAAG,CAACQ,CAAD,CAAhB,EAAqB;AACjBD,IAAAA,CAAC;AACJ,GAFD,MAGK;AACD,QAAIE,KAAK,GAAGT,GAAG,CAACQ,CAAD,CAAf;AACA,QAAIE,KAAK,GAAGV,GAAG,CAACO,CAAD,CAAf;AACAP,IAAAA,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACQ,CAAC,GAAC,CAAH,CAAZ;AACAR,IAAAA,GAAG,CAACO,CAAD,CAAH,GAASE,KAAT;AACAT,IAAAA,GAAG,CAACO,CAAC,GAAC,CAAH,CAAH,GAAWG,KAAX;AACAH,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACJ;AACJ;;AAEDG,OAAO,CAACC,GAAR,CAAYZ,GAAZ",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/tests",
      "sourcesContent": [
        "let arr = [1,3,9,10,7,11,13];\nlet start = 0;\nlet end = arr.length-1;\nlet mid = Math.floor((arr.length - start)/2);\n\n\n// let left = arr.slice(start, mid);\n// let right = arr.slice(mid, end);\n\n\nlet i = start;\nlet j = mid+1;\n\nwhile (i <= mid && j <= end) {\n    if (arr[i] < arr[j]) {\n        i++;\n    }\n    else {\n        let temp1 = arr[j];\n        let temp2 = arr[i];\n        arr[j] = arr[j-1];\n        arr[i] = temp1;\n        arr[i+1] = temp2;\n        i++;\n        j++;\n    }\n}\n\nconsole.log(arr);"
      ]
    },
    "sourceType": "script",
    "mtime": 1559009754783
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/urlify.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/urlify.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/urlify.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/urlify.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "urlify.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar str = \"Mr John Smith \";\nvar len = 13;\nvar arr = str.split('');\n\nfor (var i = 0; i < len; i++) {\n  if (str.charAt(i) === ' ') {\n    arr[i] = '%20';\n  }\n}\n\nconsole.log(arr.slice(0, 13)); // using regex\n\nvar newStr = str.replace(/\\s/gi, '%20');\nconsole.log(newStr);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVybGlmeS5qcyJdLCJuYW1lcyI6WyJzdHIiLCJsZW4iLCJhcnIiLCJzcGxpdCIsImkiLCJjaGFyQXQiLCJjb25zb2xlIiwibG9nIiwic2xpY2UiLCJuZXdTdHIiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQU1BLEdBQUcsR0FBRyxnQkFBWjtBQUNBLElBQUlDLEdBQUcsR0FBRyxFQUFWO0FBRUEsSUFBTUMsR0FBRyxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVSxFQUFWLENBQVo7O0FBRUEsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxHQUFwQixFQUF5QkcsQ0FBQyxFQUExQixFQUE4QjtBQUMxQixNQUFJSixHQUFHLENBQUNLLE1BQUosQ0FBV0QsQ0FBWCxNQUFrQixHQUF0QixFQUEyQjtBQUN2QkYsSUFBQUEsR0FBRyxDQUFDRSxDQUFELENBQUgsR0FBUyxLQUFUO0FBQ0g7QUFDSjs7QUFFREUsT0FBTyxDQUFDQyxHQUFSLENBQVlMLEdBQUcsQ0FBQ00sS0FBSixDQUFVLENBQVYsRUFBYSxFQUFiLENBQVosRSxDQUdBOztBQUVBLElBQUlDLE1BQU0sR0FBR1QsR0FBRyxDQUFDVSxPQUFKLENBQVksTUFBWixFQUFvQixLQUFwQixDQUFiO0FBQ0FKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxNQUFaIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qaXRlbmRyYS9Eb2N1bWVudHMvcHJvamVjdHMvQ3JhY2tpbmdfVGhlX0NvZGluZ19JbnRlcnZpZXcvc3JjL2FycmF5cy1hbmQtc3RyaW5ncyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHN0ciA9IFwiTXIgSm9obiBTbWl0aCBcIjtcbmxldCBsZW4gPSAxMztcblxuY29uc3QgYXJyID0gc3RyLnNwbGl0KCcnKTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChzdHIuY2hhckF0KGkpID09PSAnICcpIHtcbiAgICAgICAgYXJyW2ldID0gJyUyMCc7XG4gICAgfVxufVxuXG5jb25zb2xlLmxvZyhhcnIuc2xpY2UoMCwgMTMpKTtcblxuXG4vLyB1c2luZyByZWdleFxuXG5sZXQgbmV3U3RyID0gc3RyLnJlcGxhY2UoL1xccy9naSwgJyUyMCcpO1xuY29uc29sZS5sb2cobmV3U3RyKTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "urlify.js"
      ],
      "names": [
        "str",
        "len",
        "arr",
        "split",
        "i",
        "charAt",
        "console",
        "log",
        "slice",
        "newStr",
        "replace"
      ],
      "mappings": ";;AAAA,IAAMA,GAAG,GAAG,gBAAZ;AACA,IAAIC,GAAG,GAAG,EAAV;AAEA,IAAMC,GAAG,GAAGF,GAAG,CAACG,KAAJ,CAAU,EAAV,CAAZ;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC1B,MAAIJ,GAAG,CAACK,MAAJ,CAAWD,CAAX,MAAkB,GAAtB,EAA2B;AACvBF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAAS,KAAT;AACH;AACJ;;AAEDE,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACM,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAZ,E,CAGA;;AAEA,IAAIC,MAAM,GAAGT,GAAG,CAACU,OAAJ,CAAY,MAAZ,EAAoB,KAApB,CAAb;AACAJ,OAAO,CAACC,GAAR,CAAYE,MAAZ",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "const str = \"Mr John Smith \";\nlet len = 13;\n\nconst arr = str.split('');\n\nfor (let i = 0; i < len; i++) {\n    if (str.charAt(i) === ' ') {\n        arr[i] = '%20';\n    }\n}\n\nconsole.log(arr.slice(0, 13));\n\n\n// using regex\n\nlet newStr = str.replace(/\\s/gi, '%20');\nconsole.log(newStr);"
      ]
    },
    "sourceType": "script",
    "mtime": 1559431052562
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/palindrome-permutation.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/palindrome-permutation.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/palindrome-permutation.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/palindrome-permutation.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "palindrome-permutation.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _stringUtils = require(\"../utils/string-utils\");\n\nvar str = \"Tact Coa\";\n\nfunction hasPalindromeUsingHashMap(str) {\n  var countMap = {};\n  var isThereAnyPalindrome = true; // get count of each character\n\n  for (var i = 0; i < str.length; i++) {\n    if (!countMap[str.charAt(i)]) {\n      countMap[str.charAt(i)] = 1;\n    } else {\n      countMap[str.charAt(i)] += 1;\n    }\n  }\n\n  console.log('map is ', countMap); // check if there is more than 1 odd numbered count in the map. If yes return false. Otherwise return true\n\n  var oddNumberedCount = 0;\n  var countValues = Object.values(countMap);\n\n  for (var _i = 0; _i < countValues.length; _i++) {\n    if (countValues[_i] % 2 !== 0 || countValues[_i] === 1) {\n      oddNumberedCount++;\n    }\n\n    if (oddNumberedCount > 1) {\n      isThereAnyPalindrome = false;\n      break;\n    }\n  }\n\n  console.log(isThereAnyPalindrome);\n}\n\nfunction getBitVector(str) {\n  var check = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var index = str.charCodeAt(i) - 'a'.charCodeAt(0);\n    check ^= 1 << index;\n  }\n\n  return check;\n}\n\nfunction hasMoreThanOneOnBit(check) {\n  return (check & check - 1) > 0;\n}\n\nfunction hasPalindromUsingBitVector(str) {\n  var check = getBitVector(str);\n  console.log('check', check);\n  return !hasMoreThanOneOnBit(check);\n}\n\nvar deCapitalizedString = str.toLowerCase();\nvar spacelessString = (0, _stringUtils.removeSpaces)(deCapitalizedString); //hasPalindromeUsingHashMap(spacelessString);\n\nconsole.log(hasPalindromUsingBitVector(spacelessString));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhbGluZHJvbWUtcGVybXV0YXRpb24uanMiXSwibmFtZXMiOlsic3RyIiwiaGFzUGFsaW5kcm9tZVVzaW5nSGFzaE1hcCIsImNvdW50TWFwIiwiaXNUaGVyZUFueVBhbGluZHJvbWUiLCJpIiwibGVuZ3RoIiwiY2hhckF0IiwiY29uc29sZSIsImxvZyIsIm9kZE51bWJlcmVkQ291bnQiLCJjb3VudFZhbHVlcyIsIk9iamVjdCIsInZhbHVlcyIsImdldEJpdFZlY3RvciIsImNoZWNrIiwiaW5kZXgiLCJjaGFyQ29kZUF0IiwiaGFzTW9yZVRoYW5PbmVPbkJpdCIsImhhc1BhbGluZHJvbVVzaW5nQml0VmVjdG9yIiwiZGVDYXBpdGFsaXplZFN0cmluZyIsInRvTG93ZXJDYXNlIiwic3BhY2VsZXNzU3RyaW5nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQUlBLEdBQUcsR0FBRyxVQUFWOztBQUdBLFNBQVNDLHlCQUFULENBQW1DRCxHQUFuQyxFQUF3QztBQUNwQyxNQUFJRSxRQUFRLEdBQUcsRUFBZjtBQUNBLE1BQUlDLG9CQUFvQixHQUFHLElBQTNCLENBRm9DLENBR3BDOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osR0FBRyxDQUFDSyxNQUF4QixFQUFnQ0QsQ0FBQyxFQUFqQyxFQUFxQztBQUNqQyxRQUFJLENBQUNGLFFBQVEsQ0FBQ0YsR0FBRyxDQUFDTSxNQUFKLENBQVdGLENBQVgsQ0FBRCxDQUFiLEVBQThCO0FBQzFCRixNQUFBQSxRQUFRLENBQUNGLEdBQUcsQ0FBQ00sTUFBSixDQUFXRixDQUFYLENBQUQsQ0FBUixHQUEwQixDQUExQjtBQUNILEtBRkQsTUFFTztBQUNIRixNQUFBQSxRQUFRLENBQUNGLEdBQUcsQ0FBQ00sTUFBSixDQUFXRixDQUFYLENBQUQsQ0FBUixJQUEyQixDQUEzQjtBQUNIO0FBQ0o7O0FBRURHLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLFNBQVosRUFBdUJOLFFBQXZCLEVBWm9DLENBY3BDOztBQUVBLE1BQUlPLGdCQUFnQixHQUFHLENBQXZCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1YsUUFBZCxDQUFsQjs7QUFDQSxPQUFLLElBQUlFLEVBQUMsR0FBRyxDQUFiLEVBQWdCQSxFQUFDLEdBQUdNLFdBQVcsQ0FBQ0wsTUFBaEMsRUFBd0NELEVBQUMsRUFBekMsRUFBNkM7QUFDekMsUUFBSU0sV0FBVyxDQUFDTixFQUFELENBQVgsR0FBaUIsQ0FBakIsS0FBdUIsQ0FBdkIsSUFBNEJNLFdBQVcsQ0FBQ04sRUFBRCxDQUFYLEtBQW1CLENBQW5ELEVBQXNEO0FBQ2xESyxNQUFBQSxnQkFBZ0I7QUFDbkI7O0FBRUQsUUFBSUEsZ0JBQWdCLEdBQUcsQ0FBdkIsRUFBMEI7QUFDdEJOLE1BQUFBLG9CQUFvQixHQUFHLEtBQXZCO0FBQ0E7QUFDSDtBQUNKOztBQUVESSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUwsb0JBQVo7QUFDSDs7QUFFRCxTQUFTVSxZQUFULENBQXNCYixHQUF0QixFQUEyQjtBQUN2QixNQUFJYyxLQUFLLEdBQUcsQ0FBWjs7QUFDQSxPQUFLLElBQUlWLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0ssTUFBeEIsRUFBZ0NELENBQUMsRUFBakMsRUFBcUM7QUFDakMsUUFBSVcsS0FBSyxHQUFHZixHQUFHLENBQUNnQixVQUFKLENBQWVaLENBQWYsSUFBb0IsSUFBSVksVUFBSixDQUFlLENBQWYsQ0FBaEM7QUFDQUYsSUFBQUEsS0FBSyxJQUFJLEtBQUtDLEtBQWQ7QUFDSDs7QUFFRCxTQUFPRCxLQUFQO0FBQ0g7O0FBRUQsU0FBU0csbUJBQVQsQ0FBNkJILEtBQTdCLEVBQW9DO0FBQ2hDLFNBQU8sQ0FBQ0EsS0FBSyxHQUFJQSxLQUFLLEdBQUcsQ0FBbEIsSUFBd0IsQ0FBL0I7QUFDSDs7QUFFRCxTQUFTSSwwQkFBVCxDQUFvQ2xCLEdBQXBDLEVBQXlDO0FBQ3JDLE1BQUljLEtBQUssR0FBR0QsWUFBWSxDQUFDYixHQUFELENBQXhCO0FBQ0FPLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBcUJNLEtBQXJCO0FBQ0EsU0FBTyxDQUFDRyxtQkFBbUIsQ0FBQ0gsS0FBRCxDQUEzQjtBQUNIOztBQUdELElBQUlLLG1CQUFtQixHQUFHbkIsR0FBRyxDQUFDb0IsV0FBSixFQUExQjtBQUNBLElBQUlDLGVBQWUsR0FBRywrQkFBYUYsbUJBQWIsQ0FBdEIsQyxDQUVBOztBQUVBWixPQUFPLENBQUNDLEdBQVIsQ0FBWVUsMEJBQTBCLENBQUNHLGVBQUQsQ0FBdEMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ppdGVuZHJhL0RvY3VtZW50cy9wcm9qZWN0cy9DcmFja2luZ19UaGVfQ29kaW5nX0ludGVydmlldy9zcmMvYXJyYXlzLWFuZC1zdHJpbmdzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZW1vdmVTcGFjZXN9IGZyb20gXCIuLi91dGlscy9zdHJpbmctdXRpbHNcIjtcblxubGV0IHN0ciA9IFwiVGFjdCBDb2FcIjtcblxuXG5mdW5jdGlvbiBoYXNQYWxpbmRyb21lVXNpbmdIYXNoTWFwKHN0cikge1xuICAgIGxldCBjb3VudE1hcCA9IHt9O1xuICAgIGxldCBpc1RoZXJlQW55UGFsaW5kcm9tZSA9IHRydWU7XG4gICAgLy8gZ2V0IGNvdW50IG9mIGVhY2ggY2hhcmFjdGVyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFjb3VudE1hcFtzdHIuY2hhckF0KGkpXSkge1xuICAgICAgICAgICAgY291bnRNYXBbc3RyLmNoYXJBdChpKV0gPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY291bnRNYXBbc3RyLmNoYXJBdChpKV0gKz0gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKCdtYXAgaXMgJywgY291bnRNYXApO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIDEgb2RkIG51bWJlcmVkIGNvdW50IGluIHRoZSBtYXAuIElmIHllcyByZXR1cm4gZmFsc2UuIE90aGVyd2lzZSByZXR1cm4gdHJ1ZVxuXG4gICAgbGV0IG9kZE51bWJlcmVkQ291bnQgPSAwO1xuICAgIGxldCBjb3VudFZhbHVlcyA9IE9iamVjdC52YWx1ZXMoY291bnRNYXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNvdW50VmFsdWVzW2ldICUgMiAhPT0gMCB8fCBjb3VudFZhbHVlc1tpXSA9PT0gMSkge1xuICAgICAgICAgICAgb2RkTnVtYmVyZWRDb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9kZE51bWJlcmVkQ291bnQgPiAxKSB7XG4gICAgICAgICAgICBpc1RoZXJlQW55UGFsaW5kcm9tZSA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhpc1RoZXJlQW55UGFsaW5kcm9tZSk7XG59XG5cbmZ1bmN0aW9uIGdldEJpdFZlY3RvcihzdHIpIHtcbiAgICBsZXQgY2hlY2sgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gJ2EnLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIGNoZWNrIF49IDEgPDwgaW5kZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoZWNrO1xufVxuXG5mdW5jdGlvbiBoYXNNb3JlVGhhbk9uZU9uQml0KGNoZWNrKSB7XG4gICAgcmV0dXJuIChjaGVjayAmIChjaGVjayAtIDEpKSA+IDA7XG59XG5cbmZ1bmN0aW9uIGhhc1BhbGluZHJvbVVzaW5nQml0VmVjdG9yKHN0cikge1xuICAgIGxldCBjaGVjayA9IGdldEJpdFZlY3RvcihzdHIpO1xuICAgIGNvbnNvbGUubG9nKCdjaGVjaycsIGNoZWNrKTtcbiAgICByZXR1cm4gIWhhc01vcmVUaGFuT25lT25CaXQoY2hlY2spO1xufVxuXG5cbmxldCBkZUNhcGl0YWxpemVkU3RyaW5nID0gc3RyLnRvTG93ZXJDYXNlKCk7XG5sZXQgc3BhY2VsZXNzU3RyaW5nID0gcmVtb3ZlU3BhY2VzKGRlQ2FwaXRhbGl6ZWRTdHJpbmcpO1xuXG4vL2hhc1BhbGluZHJvbWVVc2luZ0hhc2hNYXAoc3BhY2VsZXNzU3RyaW5nKTtcblxuY29uc29sZS5sb2coaGFzUGFsaW5kcm9tVXNpbmdCaXRWZWN0b3Ioc3BhY2VsZXNzU3RyaW5nKSk7Il19",
    "map": {
      "version": 3,
      "sources": [
        "palindrome-permutation.js"
      ],
      "names": [
        "str",
        "hasPalindromeUsingHashMap",
        "countMap",
        "isThereAnyPalindrome",
        "i",
        "length",
        "charAt",
        "console",
        "log",
        "oddNumberedCount",
        "countValues",
        "Object",
        "values",
        "getBitVector",
        "check",
        "index",
        "charCodeAt",
        "hasMoreThanOneOnBit",
        "hasPalindromUsingBitVector",
        "deCapitalizedString",
        "toLowerCase",
        "spacelessString"
      ],
      "mappings": ";;AAAA;;AAEA,IAAIA,GAAG,GAAG,UAAV;;AAGA,SAASC,yBAAT,CAAmCD,GAAnC,EAAwC;AACpC,MAAIE,QAAQ,GAAG,EAAf;AACA,MAAIC,oBAAoB,GAAG,IAA3B,CAFoC,CAGpC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAI,CAACF,QAAQ,CAACF,GAAG,CAACM,MAAJ,CAAWF,CAAX,CAAD,CAAb,EAA8B;AAC1BF,MAAAA,QAAQ,CAACF,GAAG,CAACM,MAAJ,CAAWF,CAAX,CAAD,CAAR,GAA0B,CAA1B;AACH,KAFD,MAEO;AACHF,MAAAA,QAAQ,CAACF,GAAG,CAACM,MAAJ,CAAWF,CAAX,CAAD,CAAR,IAA2B,CAA3B;AACH;AACJ;;AAEDG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,QAAvB,EAZoC,CAcpC;;AAEA,MAAIO,gBAAgB,GAAG,CAAvB;AACA,MAAIC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcV,QAAd,CAAlB;;AACA,OAAK,IAAIE,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGM,WAAW,CAACL,MAAhC,EAAwCD,EAAC,EAAzC,EAA6C;AACzC,QAAIM,WAAW,CAACN,EAAD,CAAX,GAAiB,CAAjB,KAAuB,CAAvB,IAA4BM,WAAW,CAACN,EAAD,CAAX,KAAmB,CAAnD,EAAsD;AAClDK,MAAAA,gBAAgB;AACnB;;AAED,QAAIA,gBAAgB,GAAG,CAAvB,EAA0B;AACtBN,MAAAA,oBAAoB,GAAG,KAAvB;AACA;AACH;AACJ;;AAEDI,EAAAA,OAAO,CAACC,GAAR,CAAYL,oBAAZ;AACH;;AAED,SAASU,YAAT,CAAsBb,GAAtB,EAA2B;AACvB,MAAIc,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIW,KAAK,GAAGf,GAAG,CAACgB,UAAJ,CAAeZ,CAAf,IAAoB,IAAIY,UAAJ,CAAe,CAAf,CAAhC;AACAF,IAAAA,KAAK,IAAI,KAAKC,KAAd;AACH;;AAED,SAAOD,KAAP;AACH;;AAED,SAASG,mBAAT,CAA6BH,KAA7B,EAAoC;AAChC,SAAO,CAACA,KAAK,GAAIA,KAAK,GAAG,CAAlB,IAAwB,CAA/B;AACH;;AAED,SAASI,0BAAT,CAAoClB,GAApC,EAAyC;AACrC,MAAIc,KAAK,GAAGD,YAAY,CAACb,GAAD,CAAxB;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBM,KAArB;AACA,SAAO,CAACG,mBAAmB,CAACH,KAAD,CAA3B;AACH;;AAGD,IAAIK,mBAAmB,GAAGnB,GAAG,CAACoB,WAAJ,EAA1B;AACA,IAAIC,eAAe,GAAG,+BAAaF,mBAAb,CAAtB,C,CAEA;;AAEAZ,OAAO,CAACC,GAAR,CAAYU,0BAA0B,CAACG,eAAD,CAAtC",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "import {removeSpaces} from \"../utils/string-utils\";\n\nlet str = \"Tact Coa\";\n\n\nfunction hasPalindromeUsingHashMap(str) {\n    let countMap = {};\n    let isThereAnyPalindrome = true;\n    // get count of each character\n    for (let i = 0; i < str.length; i++) {\n        if (!countMap[str.charAt(i)]) {\n            countMap[str.charAt(i)] = 1;\n        } else {\n            countMap[str.charAt(i)] += 1;\n        }\n    }\n\n    console.log('map is ', countMap);\n\n    // check if there is more than 1 odd numbered count in the map. If yes return false. Otherwise return true\n\n    let oddNumberedCount = 0;\n    let countValues = Object.values(countMap);\n    for (let i = 0; i < countValues.length; i++) {\n        if (countValues[i] % 2 !== 0 || countValues[i] === 1) {\n            oddNumberedCount++;\n        }\n\n        if (oddNumberedCount > 1) {\n            isThereAnyPalindrome = false;\n            break;\n        }\n    }\n\n    console.log(isThereAnyPalindrome);\n}\n\nfunction getBitVector(str) {\n    let check = 0;\n    for (let i = 0; i < str.length; i++) {\n        let index = str.charCodeAt(i) - 'a'.charCodeAt(0);\n        check ^= 1 << index;\n    }\n\n    return check;\n}\n\nfunction hasMoreThanOneOnBit(check) {\n    return (check & (check - 1)) > 0;\n}\n\nfunction hasPalindromUsingBitVector(str) {\n    let check = getBitVector(str);\n    console.log('check', check);\n    return !hasMoreThanOneOnBit(check);\n}\n\n\nlet deCapitalizedString = str.toLowerCase();\nlet spacelessString = removeSpaces(deCapitalizedString);\n\n//hasPalindromeUsingHashMap(spacelessString);\n\nconsole.log(hasPalindromUsingBitVector(spacelessString));"
      ]
    },
    "sourceType": "script",
    "mtime": 1559520556409
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils/string-utils.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils/string-utils.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils/string-utils.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils/string-utils.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils",
        "sourceFileName": "string-utils.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeSpaces = removeSpaces;\nexports.getBitVector = getBitVector;\n\nfunction removeSpaces(str) {\n  return str ? str.replace(/\\s/gi, '') : str;\n}\n\nfunction getBitVector(str) {\n  var check = 0;\n\n  for (var i = 0; i < str.length; i++) {\n    var index = str.charCodeAt(i) - 'a'.charCodeAt(0);\n    check ^= 1 << index;\n  }\n\n  return check;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZy11dGlscy5qcyJdLCJuYW1lcyI6WyJyZW1vdmVTcGFjZXMiLCJzdHIiLCJyZXBsYWNlIiwiZ2V0Qml0VmVjdG9yIiwiY2hlY2siLCJpIiwibGVuZ3RoIiwiaW5kZXgiLCJjaGFyQ29kZUF0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPLFNBQVNBLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCO0FBQzlCLFNBQU9BLEdBQUcsR0FBR0EsR0FBRyxDQUFDQyxPQUFKLENBQVksTUFBWixFQUFvQixFQUFwQixDQUFILEdBQTZCRCxHQUF2QztBQUNIOztBQUVNLFNBQVNFLFlBQVQsQ0FBc0JGLEdBQXRCLEVBQTJCO0FBQzlCLE1BQUlHLEtBQUssR0FBRyxDQUFaOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osR0FBRyxDQUFDSyxNQUF4QixFQUFnQ0QsQ0FBQyxFQUFqQyxFQUFxQztBQUNqQyxRQUFJRSxLQUFLLEdBQUdOLEdBQUcsQ0FBQ08sVUFBSixDQUFlSCxDQUFmLElBQW9CLElBQUlHLFVBQUosQ0FBZSxDQUFmLENBQWhDO0FBQ0FKLElBQUFBLEtBQUssSUFBSSxLQUFLRyxLQUFkO0FBQ0g7O0FBRUQsU0FBT0gsS0FBUDtBQUNIIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qaXRlbmRyYS9Eb2N1bWVudHMvcHJvamVjdHMvQ3JhY2tpbmdfVGhlX0NvZGluZ19JbnRlcnZpZXcvc3JjL3V0aWxzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVNwYWNlcyhzdHIpIHtcbiAgICByZXR1cm4gc3RyID8gc3RyLnJlcGxhY2UoL1xccy9naSwgJycpIDogc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qml0VmVjdG9yKHN0cikge1xuICAgIGxldCBjaGVjayA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGluZGV4ID0gc3RyLmNoYXJDb2RlQXQoaSkgLSAnYScuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgY2hlY2sgXj0gMSA8PCBpbmRleDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hlY2s7XG59Il19",
    "map": {
      "version": 3,
      "sources": [
        "string-utils.js"
      ],
      "names": [
        "removeSpaces",
        "str",
        "replace",
        "getBitVector",
        "check",
        "i",
        "length",
        "index",
        "charCodeAt"
      ],
      "mappings": ";;;;;;;;AAAO,SAASA,YAAT,CAAsBC,GAAtB,EAA2B;AAC9B,SAAOA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,MAAZ,EAAoB,EAApB,CAAH,GAA6BD,GAAvC;AACH;;AAEM,SAASE,YAAT,CAAsBF,GAAtB,EAA2B;AAC9B,MAAIG,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAIE,KAAK,GAAGN,GAAG,CAACO,UAAJ,CAAeH,CAAf,IAAoB,IAAIG,UAAJ,CAAe,CAAf,CAAhC;AACAJ,IAAAA,KAAK,IAAI,KAAKG,KAAd;AACH;;AAED,SAAOH,KAAP;AACH",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/utils",
      "sourcesContent": [
        "export function removeSpaces(str) {\n    return str ? str.replace(/\\s/gi, '') : str;\n}\n\nexport function getBitVector(str) {\n    let check = 0;\n    for (let i = 0; i < str.length; i++) {\n        let index = str.charCodeAt(i) - 'a'.charCodeAt(0);\n        check ^= 1 << index;\n    }\n\n    return check;\n}"
      ]
    },
    "sourceType": "script",
    "mtime": 1559529424634
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/one-away.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/one-away.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/one-away.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/one-away.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "one-away.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _stringUtils = require(\"../utils/string-utils\");\n\nvar str1 = \"hi\";\nvar str2 = \"bye\";\n\nfunction oneAway(str1, str2) {\n  var check1 = (0, _stringUtils.getBitVector)(str1);\n  var check2 = (0, _stringUtils.getBitVector)(str2);\n  var diff = check1 ^ check2;\n  var diffCount = 0;\n  var isOneAway = true;\n  var index = diff;\n\n  if (diff === 0) {\n    return isOneAway;\n  } else {\n    while (index > 0) {\n      index = index >> 1;\n\n      if ((index & 1) > 0) {\n        diffCount++;\n      }\n\n      if (diffCount > 2) {\n        isOneAway = false;\n        break;\n      }\n    }\n  }\n\n  return isOneAway;\n}\n\nconsole.log(oneAway(str1, str2));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9uZS1hd2F5LmpzIl0sIm5hbWVzIjpbInN0cjEiLCJzdHIyIiwib25lQXdheSIsImNoZWNrMSIsImNoZWNrMiIsImRpZmYiLCJkaWZmQ291bnQiLCJpc09uZUF3YXkiLCJpbmRleCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsSUFBTUEsSUFBSSxHQUFHLElBQWI7QUFDQSxJQUFNQyxJQUFJLEdBQUcsS0FBYjs7QUFJQSxTQUFTQyxPQUFULENBQWlCRixJQUFqQixFQUF1QkMsSUFBdkIsRUFBNkI7QUFDekIsTUFBSUUsTUFBTSxHQUFHLCtCQUFhSCxJQUFiLENBQWI7QUFDQSxNQUFJSSxNQUFNLEdBQUcsK0JBQWFILElBQWIsQ0FBYjtBQUVBLE1BQUlJLElBQUksR0FBR0YsTUFBTSxHQUFHQyxNQUFwQjtBQUNBLE1BQUlFLFNBQVMsR0FBRyxDQUFoQjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxJQUFoQjtBQUNBLE1BQUlDLEtBQUssR0FBR0gsSUFBWjs7QUFFQSxNQUFJQSxJQUFJLEtBQUssQ0FBYixFQUFnQjtBQUNaLFdBQU9FLFNBQVA7QUFDSCxHQUZELE1BRU87QUFDSCxXQUFPQyxLQUFLLEdBQUcsQ0FBZixFQUFrQjtBQUVkQSxNQUFBQSxLQUFLLEdBQUdBLEtBQUssSUFBSSxDQUFqQjs7QUFDQSxVQUFJLENBQUNBLEtBQUssR0FBRyxDQUFULElBQWMsQ0FBbEIsRUFBcUI7QUFDakJGLFFBQUFBLFNBQVM7QUFDWjs7QUFFRCxVQUFJQSxTQUFTLEdBQUcsQ0FBaEIsRUFBbUI7QUFDZkMsUUFBQUEsU0FBUyxHQUFHLEtBQVo7QUFDQTtBQUNIO0FBQ0o7QUFDSjs7QUFFRCxTQUFPQSxTQUFQO0FBQ0g7O0FBRURFLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUixPQUFPLENBQUNGLElBQUQsRUFBT0MsSUFBUCxDQUFuQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvaml0ZW5kcmEvRG9jdW1lbnRzL3Byb2plY3RzL0NyYWNraW5nX1RoZV9Db2RpbmdfSW50ZXJ2aWV3L3NyYy9hcnJheXMtYW5kLXN0cmluZ3MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldEJpdFZlY3Rvcn0gZnJvbSBcIi4uL3V0aWxzL3N0cmluZy11dGlsc1wiO1xuXG5jb25zdCBzdHIxID0gXCJoaVwiO1xuY29uc3Qgc3RyMiA9IFwiYnllXCI7XG5cblxuXG5mdW5jdGlvbiBvbmVBd2F5KHN0cjEsIHN0cjIpIHtcbiAgICBsZXQgY2hlY2sxID0gZ2V0Qml0VmVjdG9yKHN0cjEpO1xuICAgIGxldCBjaGVjazIgPSBnZXRCaXRWZWN0b3Ioc3RyMik7XG5cbiAgICBsZXQgZGlmZiA9IGNoZWNrMSBeIGNoZWNrMjtcbiAgICBsZXQgZGlmZkNvdW50ID0gMDtcbiAgICBsZXQgaXNPbmVBd2F5ID0gdHJ1ZTtcbiAgICBsZXQgaW5kZXggPSBkaWZmO1xuXG4gICAgaWYgKGRpZmYgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlzT25lQXdheTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aGlsZSAoaW5kZXggPiAwKSB7XG5cbiAgICAgICAgICAgIGluZGV4ID0gaW5kZXggPj4gMTtcbiAgICAgICAgICAgIGlmICgoaW5kZXggJiAxKSA+IDApIHtcbiAgICAgICAgICAgICAgICBkaWZmQ291bnQrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRpZmZDb3VudCA+IDIpIHtcbiAgICAgICAgICAgICAgICBpc09uZUF3YXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpc09uZUF3YXk7XG59XG5cbmNvbnNvbGUubG9nKG9uZUF3YXkoc3RyMSwgc3RyMikpOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "one-away.js"
      ],
      "names": [
        "str1",
        "str2",
        "oneAway",
        "check1",
        "check2",
        "diff",
        "diffCount",
        "isOneAway",
        "index",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AAEA,IAAMA,IAAI,GAAG,IAAb;AACA,IAAMC,IAAI,GAAG,KAAb;;AAIA,SAASC,OAAT,CAAiBF,IAAjB,EAAuBC,IAAvB,EAA6B;AACzB,MAAIE,MAAM,GAAG,+BAAaH,IAAb,CAAb;AACA,MAAII,MAAM,GAAG,+BAAaH,IAAb,CAAb;AAEA,MAAII,IAAI,GAAGF,MAAM,GAAGC,MAApB;AACA,MAAIE,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,KAAK,GAAGH,IAAZ;;AAEA,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACZ,WAAOE,SAAP;AACH,GAFD,MAEO;AACH,WAAOC,KAAK,GAAG,CAAf,EAAkB;AAEdA,MAAAA,KAAK,GAAGA,KAAK,IAAI,CAAjB;;AACA,UAAI,CAACA,KAAK,GAAG,CAAT,IAAc,CAAlB,EAAqB;AACjBF,QAAAA,SAAS;AACZ;;AAED,UAAIA,SAAS,GAAG,CAAhB,EAAmB;AACfC,QAAAA,SAAS,GAAG,KAAZ;AACA;AACH;AACJ;AACJ;;AAED,SAAOA,SAAP;AACH;;AAEDE,OAAO,CAACC,GAAR,CAAYR,OAAO,CAACF,IAAD,EAAOC,IAAP,CAAnB",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "import {getBitVector} from \"../utils/string-utils\";\n\nconst str1 = \"hi\";\nconst str2 = \"bye\";\n\n\n\nfunction oneAway(str1, str2) {\n    let check1 = getBitVector(str1);\n    let check2 = getBitVector(str2);\n\n    let diff = check1 ^ check2;\n    let diffCount = 0;\n    let isOneAway = true;\n    let index = diff;\n\n    if (diff === 0) {\n        return isOneAway;\n    } else {\n        while (index > 0) {\n\n            index = index >> 1;\n            if ((index & 1) > 0) {\n                diffCount++;\n            }\n\n            if (diffCount > 2) {\n                isOneAway = false;\n                break;\n            }\n        }\n    }\n\n    return isOneAway;\n}\n\nconsole.log(oneAway(str1, str2));"
      ]
    },
    "sourceType": "script",
    "mtime": 1559534343008
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/rotate-matrix.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/rotate-matrix.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/rotate-matrix.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/rotate-matrix.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "rotate-matrix.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction swapLayers(i, j, arr) {\n  var temp;\n  var n = arr.length; // swap all corners of the layer\n\n  temp = arr[i][n - 1 - j];\n  arr[i][n - 1 - j] = arr[i][j];\n  arr[i][j] = arr[n - 1 - i][j];\n  arr[n - 1 - i][j] = arr[n - 1 - i][n - 1 - j];\n  arr[n - 1 - i][n - 1 - j] = temp; // swap other elements in the layer\n  // swap top and right\n\n  for (var k = i + 1; k < n - 1 - i; k++) {\n    temp = arr[k][n - 1 - j];\n    arr[k][n - 1 - j] = arr[i][k];\n    arr[i][k] = temp;\n  } // swap top and bottom\n\n\n  var m = j + 1;\n\n  for (var _k = n - 2 - j; _k > j; _k--) {\n    temp = arr[n - 1 - i][_k];\n    arr[n - 1 - i][_k] = arr[i][m];\n    arr[i][m] = temp;\n    m++;\n  } // swap top left\n\n\n  m = j + 1;\n\n  for (var _k2 = n - 2 - i; _k2 > i; _k2--) {\n    temp = arr[i][m];\n    arr[i][m] = arr[_k2][j];\n    arr[_k2][j] = temp;\n    m++;\n  }\n\n  console.log(arr);\n}\n\nvar arr = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]];\n\nfunction rotateMatrix(arr) {\n  var n = arr.length;\n\n  if (n === 1) {\n    return;\n  } else if (n <= 0) {\n    console.log('invalid matrix');\n  } else {\n    var i = 0,\n        j = 0;\n\n    do {\n      swapLayers(i, j, arr);\n      i++;\n      j++;\n    } while (i < parseInt(n / 2));\n  }\n}\n\nrotateMatrix(arr);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdGF0ZS1tYXRyaXguanMiXSwibmFtZXMiOlsic3dhcExheWVycyIsImkiLCJqIiwiYXJyIiwidGVtcCIsIm4iLCJsZW5ndGgiLCJrIiwibSIsImNvbnNvbGUiLCJsb2ciLCJyb3RhdGVNYXRyaXgiLCJwYXJzZUludCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxTQUFTQSxVQUFULENBQW9CQyxDQUFwQixFQUF1QkMsQ0FBdkIsRUFBMEJDLEdBQTFCLEVBQStCO0FBQzNCLE1BQUlDLElBQUo7QUFDQSxNQUFJQyxDQUFDLEdBQUdGLEdBQUcsQ0FBQ0csTUFBWixDQUYyQixDQUkzQjs7QUFDQUYsRUFBQUEsSUFBSSxHQUFHRCxHQUFHLENBQUNGLENBQUQsQ0FBSCxDQUFPSSxDQUFDLEdBQUcsQ0FBSixHQUFRSCxDQUFmLENBQVA7QUFDQUMsRUFBQUEsR0FBRyxDQUFDRixDQUFELENBQUgsQ0FBT0ksQ0FBQyxHQUFHLENBQUosR0FBUUgsQ0FBZixJQUFvQkMsR0FBRyxDQUFDRixDQUFELENBQUgsQ0FBT0MsQ0FBUCxDQUFwQjtBQUNBQyxFQUFBQSxHQUFHLENBQUNGLENBQUQsQ0FBSCxDQUFPQyxDQUFQLElBQVlDLEdBQUcsQ0FBQ0UsQ0FBQyxHQUFHLENBQUosR0FBUUosQ0FBVCxDQUFILENBQWVDLENBQWYsQ0FBWjtBQUNBQyxFQUFBQSxHQUFHLENBQUNFLENBQUMsR0FBRyxDQUFKLEdBQVFKLENBQVQsQ0FBSCxDQUFlQyxDQUFmLElBQW9CQyxHQUFHLENBQUNFLENBQUMsR0FBRyxDQUFKLEdBQVFKLENBQVQsQ0FBSCxDQUFlSSxDQUFDLEdBQUcsQ0FBSixHQUFRSCxDQUF2QixDQUFwQjtBQUNBQyxFQUFBQSxHQUFHLENBQUNFLENBQUMsR0FBRyxDQUFKLEdBQVFKLENBQVQsQ0FBSCxDQUFlSSxDQUFDLEdBQUcsQ0FBSixHQUFRSCxDQUF2QixJQUE0QkUsSUFBNUIsQ0FUMkIsQ0FXM0I7QUFFQTs7QUFDQSxPQUFLLElBQUlHLENBQUMsR0FBR04sQ0FBQyxHQUFDLENBQWYsRUFBa0JNLENBQUMsR0FBR0YsQ0FBQyxHQUFHLENBQUosR0FBUUosQ0FBOUIsRUFBaUNNLENBQUMsRUFBbEMsRUFBc0M7QUFDbENILElBQUFBLElBQUksR0FBR0QsR0FBRyxDQUFDSSxDQUFELENBQUgsQ0FBT0YsQ0FBQyxHQUFHLENBQUosR0FBUUgsQ0FBZixDQUFQO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQ0ksQ0FBRCxDQUFILENBQU9GLENBQUMsR0FBRyxDQUFKLEdBQVFILENBQWYsSUFBb0JDLEdBQUcsQ0FBQ0YsQ0FBRCxDQUFILENBQU9NLENBQVAsQ0FBcEI7QUFDQUosSUFBQUEsR0FBRyxDQUFDRixDQUFELENBQUgsQ0FBT00sQ0FBUCxJQUFZSCxJQUFaO0FBQ0gsR0FsQjBCLENBb0IzQjs7O0FBQ0EsTUFBSUksQ0FBQyxHQUFHTixDQUFDLEdBQUcsQ0FBWjs7QUFDQSxPQUFLLElBQUlLLEVBQUMsR0FBR0YsQ0FBQyxHQUFHLENBQUosR0FBUUgsQ0FBckIsRUFBd0JLLEVBQUMsR0FBR0wsQ0FBNUIsRUFBK0JLLEVBQUMsRUFBaEMsRUFBb0M7QUFDaENILElBQUFBLElBQUksR0FBR0QsR0FBRyxDQUFDRSxDQUFDLEdBQUcsQ0FBSixHQUFRSixDQUFULENBQUgsQ0FBZU0sRUFBZixDQUFQO0FBQ0FKLElBQUFBLEdBQUcsQ0FBQ0UsQ0FBQyxHQUFHLENBQUosR0FBUUosQ0FBVCxDQUFILENBQWVNLEVBQWYsSUFBb0JKLEdBQUcsQ0FBQ0YsQ0FBRCxDQUFILENBQU9PLENBQVAsQ0FBcEI7QUFDQUwsSUFBQUEsR0FBRyxDQUFDRixDQUFELENBQUgsQ0FBT08sQ0FBUCxJQUFZSixJQUFaO0FBQ0FJLElBQUFBLENBQUM7QUFDSixHQTNCMEIsQ0E2QjNCOzs7QUFFQUEsRUFBQUEsQ0FBQyxHQUFHTixDQUFDLEdBQUcsQ0FBUjs7QUFDQSxPQUFLLElBQUlLLEdBQUMsR0FBR0YsQ0FBQyxHQUFHLENBQUosR0FBUUosQ0FBckIsRUFBd0JNLEdBQUMsR0FBR04sQ0FBNUIsRUFBK0JNLEdBQUMsRUFBaEMsRUFBb0M7QUFDaENILElBQUFBLElBQUksR0FBR0QsR0FBRyxDQUFDRixDQUFELENBQUgsQ0FBT08sQ0FBUCxDQUFQO0FBQ0FMLElBQUFBLEdBQUcsQ0FBQ0YsQ0FBRCxDQUFILENBQU9PLENBQVAsSUFBWUwsR0FBRyxDQUFDSSxHQUFELENBQUgsQ0FBT0wsQ0FBUCxDQUFaO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQ0ksR0FBRCxDQUFILENBQU9MLENBQVAsSUFBWUUsSUFBWjtBQUNBSSxJQUFBQSxDQUFDO0FBQ0o7O0FBRURDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZUCxHQUFaO0FBQ0g7O0FBRUQsSUFBTUEsR0FBRyxHQUFHLENBQ1IsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQURRLEVBRVIsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsRUFBVCxDQUZRLEVBR1IsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsRUFBVSxFQUFWLEVBQWEsRUFBYixDQUhRLEVBSVIsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsRUFBVSxFQUFWLEVBQWEsRUFBYixDQUpRLEVBS1IsQ0FBQyxFQUFELEVBQUksRUFBSixFQUFPLEVBQVAsRUFBVSxFQUFWLEVBQWEsRUFBYixDQUxRLENBQVo7O0FBUUEsU0FBU1EsWUFBVCxDQUFzQlIsR0FBdEIsRUFBMkI7QUFDdkIsTUFBSUUsQ0FBQyxHQUFHRixHQUFHLENBQUNHLE1BQVo7O0FBQ0EsTUFBSUQsQ0FBQyxLQUFLLENBQVYsRUFBYztBQUNWO0FBQ0gsR0FGRCxNQUVPLElBQUlBLENBQUMsSUFBSSxDQUFULEVBQVk7QUFDZkksSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksZ0JBQVo7QUFDSCxHQUZNLE1BRUE7QUFDSCxRQUFJVCxDQUFDLEdBQUcsQ0FBUjtBQUFBLFFBQVVDLENBQUMsR0FBRyxDQUFkOztBQUNBLE9BQUc7QUFDQ0YsTUFBQUEsVUFBVSxDQUFDQyxDQUFELEVBQUdDLENBQUgsRUFBTUMsR0FBTixDQUFWO0FBQ0FGLE1BQUFBLENBQUM7QUFDREMsTUFBQUEsQ0FBQztBQUVKLEtBTEQsUUFLU0QsQ0FBQyxHQUFHVyxRQUFRLENBQUNQLENBQUMsR0FBRyxDQUFMLENBTHJCO0FBTUg7QUFDSjs7QUFFRE0sWUFBWSxDQUFDUixHQUFELENBQVoiLCJzb3VyY2VSb290IjoiL1VzZXJzL2ppdGVuZHJhL0RvY3VtZW50cy9wcm9qZWN0cy9DcmFja2luZ19UaGVfQ29kaW5nX0ludGVydmlldy9zcmMvYXJyYXlzLWFuZC1zdHJpbmdzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc3dhcExheWVycyhpLCBqLCBhcnIpIHtcbiAgICBsZXQgdGVtcDtcbiAgICBsZXQgbiA9IGFyci5sZW5ndGg7XG5cbiAgICAvLyBzd2FwIGFsbCBjb3JuZXJzIG9mIHRoZSBsYXllclxuICAgIHRlbXAgPSBhcnJbaV1bbiAtIDEgLSBqXTtcbiAgICBhcnJbaV1bbiAtIDEgLSBqXSA9IGFycltpXVtqXTtcbiAgICBhcnJbaV1bal0gPSBhcnJbbiAtIDEgLSBpXVtqXTtcbiAgICBhcnJbbiAtIDEgLSBpXVtqXSA9IGFycltuIC0gMSAtIGldW24gLSAxIC0gal07XG4gICAgYXJyW24gLSAxIC0gaV1bbiAtIDEgLSBqXSA9IHRlbXA7XG5cbiAgICAvLyBzd2FwIG90aGVyIGVsZW1lbnRzIGluIHRoZSBsYXllclxuXG4gICAgLy8gc3dhcCB0b3AgYW5kIHJpZ2h0XG4gICAgZm9yIChsZXQgayA9IGkrMTsgayA8IG4gLSAxIC0gaTsgaysrKSB7XG4gICAgICAgIHRlbXAgPSBhcnJba11bbiAtIDEgLSBqXTtcbiAgICAgICAgYXJyW2tdW24gLSAxIC0gal0gPSBhcnJbaV1ba107XG4gICAgICAgIGFycltpXVtrXSA9IHRlbXA7XG4gICAgfVxuXG4gICAgLy8gc3dhcCB0b3AgYW5kIGJvdHRvbVxuICAgIGxldCBtID0gaiArIDE7XG4gICAgZm9yIChsZXQgayA9IG4gLSAyIC0gajsgayA+IGo7IGstLSkge1xuICAgICAgICB0ZW1wID0gYXJyW24gLSAxIC0gaV1ba107XG4gICAgICAgIGFycltuIC0gMSAtIGldW2tdID0gYXJyW2ldW21dO1xuICAgICAgICBhcnJbaV1bbV0gPSB0ZW1wO1xuICAgICAgICBtKytcbiAgICB9XG5cbiAgICAvLyBzd2FwIHRvcCBsZWZ0XG5cbiAgICBtID0gaiArIDE7XG4gICAgZm9yIChsZXQgayA9IG4gLSAyIC0gaTsgayA+IGk7IGstLSkge1xuICAgICAgICB0ZW1wID0gYXJyW2ldW21dO1xuICAgICAgICBhcnJbaV1bbV0gPSBhcnJba11bal07XG4gICAgICAgIGFycltrXVtqXSA9IHRlbXA7XG4gICAgICAgIG0rKztcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZyhhcnIpO1xufVxuXG5jb25zdCBhcnIgPSBbXG4gICAgWzEsMiwzLDQsNV0sXG4gICAgWzYsNyw4LDksMTBdLFxuICAgIFsxMSwxMiwxMywxNCwxNV0sXG4gICAgWzE2LDE3LDE4LDE5LDIwXSxcbiAgICBbMjEsMjIsMjMsMjQsMjVdXG5dO1xuXG5mdW5jdGlvbiByb3RhdGVNYXRyaXgoYXJyKSB7XG4gICAgbGV0IG4gPSBhcnIubGVuZ3RoO1xuICAgIGlmIChuID09PSAxICkge1xuICAgICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChuIDw9IDApIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2ludmFsaWQgbWF0cml4Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGkgPSAwLGogPSAwO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBzd2FwTGF5ZXJzKGksaiwgYXJyKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIFxuICAgICAgICB9IHdoaWxlIChpIDwgcGFyc2VJbnQobiAvIDIpKVxuICAgIH1cbn1cblxucm90YXRlTWF0cml4KGFycik7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "rotate-matrix.js"
      ],
      "names": [
        "swapLayers",
        "i",
        "j",
        "arr",
        "temp",
        "n",
        "length",
        "k",
        "m",
        "console",
        "log",
        "rotateMatrix",
        "parseInt"
      ],
      "mappings": ";;AAAA,SAASA,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0BC,GAA1B,EAA+B;AAC3B,MAAIC,IAAJ;AACA,MAAIC,CAAC,GAAGF,GAAG,CAACG,MAAZ,CAF2B,CAI3B;;AACAF,EAAAA,IAAI,GAAGD,GAAG,CAACF,CAAD,CAAH,CAAOI,CAAC,GAAG,CAAJ,GAAQH,CAAf,CAAP;AACAC,EAAAA,GAAG,CAACF,CAAD,CAAH,CAAOI,CAAC,GAAG,CAAJ,GAAQH,CAAf,IAAoBC,GAAG,CAACF,CAAD,CAAH,CAAOC,CAAP,CAApB;AACAC,EAAAA,GAAG,CAACF,CAAD,CAAH,CAAOC,CAAP,IAAYC,GAAG,CAACE,CAAC,GAAG,CAAJ,GAAQJ,CAAT,CAAH,CAAeC,CAAf,CAAZ;AACAC,EAAAA,GAAG,CAACE,CAAC,GAAG,CAAJ,GAAQJ,CAAT,CAAH,CAAeC,CAAf,IAAoBC,GAAG,CAACE,CAAC,GAAG,CAAJ,GAAQJ,CAAT,CAAH,CAAeI,CAAC,GAAG,CAAJ,GAAQH,CAAvB,CAApB;AACAC,EAAAA,GAAG,CAACE,CAAC,GAAG,CAAJ,GAAQJ,CAAT,CAAH,CAAeI,CAAC,GAAG,CAAJ,GAAQH,CAAvB,IAA4BE,IAA5B,CAT2B,CAW3B;AAEA;;AACA,OAAK,IAAIG,CAAC,GAAGN,CAAC,GAAC,CAAf,EAAkBM,CAAC,GAAGF,CAAC,GAAG,CAAJ,GAAQJ,CAA9B,EAAiCM,CAAC,EAAlC,EAAsC;AAClCH,IAAAA,IAAI,GAAGD,GAAG,CAACI,CAAD,CAAH,CAAOF,CAAC,GAAG,CAAJ,GAAQH,CAAf,CAAP;AACAC,IAAAA,GAAG,CAACI,CAAD,CAAH,CAAOF,CAAC,GAAG,CAAJ,GAAQH,CAAf,IAAoBC,GAAG,CAACF,CAAD,CAAH,CAAOM,CAAP,CAApB;AACAJ,IAAAA,GAAG,CAACF,CAAD,CAAH,CAAOM,CAAP,IAAYH,IAAZ;AACH,GAlB0B,CAoB3B;;;AACA,MAAII,CAAC,GAAGN,CAAC,GAAG,CAAZ;;AACA,OAAK,IAAIK,EAAC,GAAGF,CAAC,GAAG,CAAJ,GAAQH,CAArB,EAAwBK,EAAC,GAAGL,CAA5B,EAA+BK,EAAC,EAAhC,EAAoC;AAChCH,IAAAA,IAAI,GAAGD,GAAG,CAACE,CAAC,GAAG,CAAJ,GAAQJ,CAAT,CAAH,CAAeM,EAAf,CAAP;AACAJ,IAAAA,GAAG,CAACE,CAAC,GAAG,CAAJ,GAAQJ,CAAT,CAAH,CAAeM,EAAf,IAAoBJ,GAAG,CAACF,CAAD,CAAH,CAAOO,CAAP,CAApB;AACAL,IAAAA,GAAG,CAACF,CAAD,CAAH,CAAOO,CAAP,IAAYJ,IAAZ;AACAI,IAAAA,CAAC;AACJ,GA3B0B,CA6B3B;;;AAEAA,EAAAA,CAAC,GAAGN,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIK,GAAC,GAAGF,CAAC,GAAG,CAAJ,GAAQJ,CAArB,EAAwBM,GAAC,GAAGN,CAA5B,EAA+BM,GAAC,EAAhC,EAAoC;AAChCH,IAAAA,IAAI,GAAGD,GAAG,CAACF,CAAD,CAAH,CAAOO,CAAP,CAAP;AACAL,IAAAA,GAAG,CAACF,CAAD,CAAH,CAAOO,CAAP,IAAYL,GAAG,CAACI,GAAD,CAAH,CAAOL,CAAP,CAAZ;AACAC,IAAAA,GAAG,CAACI,GAAD,CAAH,CAAOL,CAAP,IAAYE,IAAZ;AACAI,IAAAA,CAAC;AACJ;;AAEDC,EAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH;;AAED,IAAMA,GAAG,GAAG,CACR,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CADQ,EAER,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,EAAT,CAFQ,EAGR,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAHQ,EAIR,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CAJQ,EAKR,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,EAAU,EAAV,EAAa,EAAb,CALQ,CAAZ;;AAQA,SAASQ,YAAT,CAAsBR,GAAtB,EAA2B;AACvB,MAAIE,CAAC,GAAGF,GAAG,CAACG,MAAZ;;AACA,MAAID,CAAC,KAAK,CAAV,EAAc;AACV;AACH,GAFD,MAEO,IAAIA,CAAC,IAAI,CAAT,EAAY;AACfI,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH,GAFM,MAEA;AACH,QAAIT,CAAC,GAAG,CAAR;AAAA,QAAUC,CAAC,GAAG,CAAd;;AACA,OAAG;AACCF,MAAAA,UAAU,CAACC,CAAD,EAAGC,CAAH,EAAMC,GAAN,CAAV;AACAF,MAAAA,CAAC;AACDC,MAAAA,CAAC;AAEJ,KALD,QAKSD,CAAC,GAAGW,QAAQ,CAACP,CAAC,GAAG,CAAL,CALrB;AAMH;AACJ;;AAEDM,YAAY,CAACR,GAAD,CAAZ",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "function swapLayers(i, j, arr) {\n    let temp;\n    let n = arr.length;\n\n    // swap all corners of the layer\n    temp = arr[i][n - 1 - j];\n    arr[i][n - 1 - j] = arr[i][j];\n    arr[i][j] = arr[n - 1 - i][j];\n    arr[n - 1 - i][j] = arr[n - 1 - i][n - 1 - j];\n    arr[n - 1 - i][n - 1 - j] = temp;\n\n    // swap other elements in the layer\n\n    // swap top and right\n    for (let k = i+1; k < n - 1 - i; k++) {\n        temp = arr[k][n - 1 - j];\n        arr[k][n - 1 - j] = arr[i][k];\n        arr[i][k] = temp;\n    }\n\n    // swap top and bottom\n    let m = j + 1;\n    for (let k = n - 2 - j; k > j; k--) {\n        temp = arr[n - 1 - i][k];\n        arr[n - 1 - i][k] = arr[i][m];\n        arr[i][m] = temp;\n        m++\n    }\n\n    // swap top left\n\n    m = j + 1;\n    for (let k = n - 2 - i; k > i; k--) {\n        temp = arr[i][m];\n        arr[i][m] = arr[k][j];\n        arr[k][j] = temp;\n        m++;\n    }\n\n    console.log(arr);\n}\n\nconst arr = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15],\n    [16,17,18,19,20],\n    [21,22,23,24,25]\n];\n\nfunction rotateMatrix(arr) {\n    let n = arr.length;\n    if (n === 1 ) {\n        return;\n    } else if (n <= 0) {\n        console.log('invalid matrix');\n    } else {\n        let i = 0,j = 0;\n        do {\n            swapLayers(i,j, arr);\n            i++;\n            j++;\n            \n        } while (i < parseInt(n / 2))\n    }\n}\n\nrotateMatrix(arr);\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1559714811841
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/binary-search.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/binary-search.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/binary-search.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/binary-search.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
        "sourceFileName": "binary-search.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction IDsOfPackages(rideDuration, songDurations) {\n  // WRITE YOUR CODE HERE\n  // PICK pair which exactly ends before 30 seconds\n  // if multiple pairs exists, then pick pair with longest songDurations\n  // find pair with sum exactly combinedDuration\n  var pair = [];\n  var combinedDuration = rideDuration - 30;\n  var sortedSongDurations = [];\n\n  for (var i = 0; i < songDurations.length; i++) {\n    sortedSongDurations.push(songDurations[i]);\n  } // first sort the songDurations\n\n\n  mergeSort(sortedSongDurations); // loop through the sortedSongDurations from the back and then do a binary search so that\n  // the sum of the pair is combinedDuration, so that the time complexity is n * log(n)\n  // n for looping through list, log(n) for binary search\n\n  for (var j = sortedSongDurations.length - 1; j > 0; j--) {\n    if (sortedSongDurations[j] < combinedDuration) {\n      var remainingTime = combinedDuration - sortedSongDurations[j];\n      var match = binarySearch(sortedSongDurations, remainingTime, 0, j - 1);\n\n      if (match) {\n        pair[0] = songDurations.indexOf(sortedSongDurations[match]);\n        pair[1] = songDurations.indexOf(sortedSongDurations[j]);\n      }\n    }\n  }\n\n  return pair;\n} // FUNCTION SIGNATURE ENDS\n\n\nfunction mergeSort(arr) {\n  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length - 1;\n  var mid = Math.floor((end + start) / 2);\n\n  if (start < end) {\n    mergeSort(arr, start, mid);\n    mergeSort(arr, mid + 1, end);\n    merge(arr, start, mid, end);\n  }\n}\n\nfunction merge(arr, start, mid, end) {\n  var i = start;\n  var j = mid + 1;\n\n  while (i < end && j <= end) {\n    if (arr[i] < arr[j]) {\n      i++;\n    } else {\n      var temp = arr[j];\n\n      for (var k = j; k > i; k--) {\n        arr[k] = arr[k - 1];\n      }\n\n      arr[i] = temp;\n    }\n\n    i++;\n    j++;\n  }\n}\n\nfunction binarySearch(arr, k, start, end) {\n  if (start > end) return;\n  var mid = Math.floor((start + end) / 2);\n  if (arr[mid] === k) return mid;\n\n  if (arr[mid] > k) {\n    return binarySearch(arr, k, start, mid - 1);\n  } else {\n    return binarySearch(arr, k, mid + 1, end);\n  }\n}\n\nvar x = IDsOfPackages(90, [1, 10, 25, 35, 60]);\nconsole.log(x);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmFyeS1zZWFyY2guanMiXSwibmFtZXMiOlsiSURzT2ZQYWNrYWdlcyIsInJpZGVEdXJhdGlvbiIsInNvbmdEdXJhdGlvbnMiLCJwYWlyIiwiY29tYmluZWREdXJhdGlvbiIsInNvcnRlZFNvbmdEdXJhdGlvbnMiLCJpIiwibGVuZ3RoIiwicHVzaCIsIm1lcmdlU29ydCIsImoiLCJyZW1haW5pbmdUaW1lIiwibWF0Y2giLCJiaW5hcnlTZWFyY2giLCJpbmRleE9mIiwiYXJyIiwic3RhcnQiLCJlbmQiLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJtZXJnZSIsInRlbXAiLCJrIiwieCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsYUFBVCxDQUF1QkMsWUFBdkIsRUFBcUNDLGFBQXJDLEVBQ0E7QUFDSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQUlDLElBQUksR0FBRyxFQUFYO0FBQ0EsTUFBSUMsZ0JBQWdCLEdBQUdILFlBQVksR0FBRyxFQUF0QztBQUNBLE1BQUlJLG1CQUFtQixHQUFHLEVBQTFCOztBQUNBLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0osYUFBYSxDQUFDSyxNQUFsQyxFQUEwQ0QsQ0FBQyxFQUEzQyxFQUErQztBQUMzQ0QsSUFBQUEsbUJBQW1CLENBQUNHLElBQXBCLENBQXlCTixhQUFhLENBQUNJLENBQUQsQ0FBdEM7QUFDSCxHQVZMLENBWUk7OztBQUVBRyxFQUFBQSxTQUFTLENBQUNKLG1CQUFELENBQVQsQ0FkSixDQWdCSTtBQUNBO0FBQ0E7O0FBRUEsT0FBSyxJQUFJSyxDQUFDLEdBQUdMLG1CQUFtQixDQUFDRSxNQUFwQixHQUE2QixDQUExQyxFQUE2Q0csQ0FBQyxHQUFFLENBQWhELEVBQW1EQSxDQUFDLEVBQXBELEVBQXdEO0FBQ3BELFFBQUlMLG1CQUFtQixDQUFDSyxDQUFELENBQW5CLEdBQXlCTixnQkFBN0IsRUFBK0M7QUFDM0MsVUFBSU8sYUFBYSxHQUFHUCxnQkFBZ0IsR0FBR0MsbUJBQW1CLENBQUNLLENBQUQsQ0FBMUQ7QUFDQSxVQUFJRSxLQUFLLEdBQUdDLFlBQVksQ0FBQ1IsbUJBQUQsRUFBc0JNLGFBQXRCLEVBQXFDLENBQXJDLEVBQXdDRCxDQUFDLEdBQUcsQ0FBNUMsQ0FBeEI7O0FBQ0EsVUFBSUUsS0FBSixFQUFXO0FBQ1BULFFBQUFBLElBQUksQ0FBQyxDQUFELENBQUosR0FBVUQsYUFBYSxDQUFDWSxPQUFkLENBQXNCVCxtQkFBbUIsQ0FBQ08sS0FBRCxDQUF6QyxDQUFWO0FBQ0FULFFBQUFBLElBQUksQ0FBQyxDQUFELENBQUosR0FBVUQsYUFBYSxDQUFDWSxPQUFkLENBQXNCVCxtQkFBbUIsQ0FBQ0ssQ0FBRCxDQUF6QyxDQUFWO0FBQ0g7QUFDSjtBQUNKOztBQUVELFNBQU9QLElBQVA7QUFFSCxDLENBQ0Q7OztBQUVBLFNBQVNNLFNBQVQsQ0FBbUJNLEdBQW5CLEVBQXlEO0FBQUEsTUFBakNDLEtBQWlDLHVFQUF6QixDQUF5QjtBQUFBLE1BQXRCQyxHQUFzQix1RUFBaEJGLEdBQUcsQ0FBQ1IsTUFBSixHQUFhLENBQUc7QUFDckQsTUFBSVcsR0FBRyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBVyxDQUFDSCxHQUFHLEdBQUdELEtBQVAsSUFBYyxDQUF6QixDQUFWOztBQUNBLE1BQUlBLEtBQUssR0FBR0MsR0FBWixFQUFpQjtBQUNiUixJQUFBQSxTQUFTLENBQUNNLEdBQUQsRUFBTUMsS0FBTixFQUFhRSxHQUFiLENBQVQ7QUFDQVQsSUFBQUEsU0FBUyxDQUFDTSxHQUFELEVBQU1HLEdBQUcsR0FBQyxDQUFWLEVBQWFELEdBQWIsQ0FBVDtBQUNBSSxJQUFBQSxLQUFLLENBQUNOLEdBQUQsRUFBTUMsS0FBTixFQUFhRSxHQUFiLEVBQWtCRCxHQUFsQixDQUFMO0FBQ0g7QUFDSjs7QUFFRCxTQUFTSSxLQUFULENBQWVOLEdBQWYsRUFBb0JDLEtBQXBCLEVBQTJCRSxHQUEzQixFQUFnQ0QsR0FBaEMsRUFBcUM7QUFDakMsTUFBSVgsQ0FBQyxHQUFHVSxLQUFSO0FBQ0EsTUFBSU4sQ0FBQyxHQUFHUSxHQUFHLEdBQUMsQ0FBWjs7QUFFQSxTQUFPWixDQUFDLEdBQUdXLEdBQUosSUFBV1AsQ0FBQyxJQUFJTyxHQUF2QixFQUE0QjtBQUN4QixRQUFJRixHQUFHLENBQUNULENBQUQsQ0FBSCxHQUFTUyxHQUFHLENBQUNMLENBQUQsQ0FBaEIsRUFBcUI7QUFDakJKLE1BQUFBLENBQUM7QUFDSixLQUZELE1BRU87QUFDSCxVQUFJZ0IsSUFBSSxHQUFHUCxHQUFHLENBQUNMLENBQUQsQ0FBZDs7QUFDQSxXQUFLLElBQUlhLENBQUMsR0FBR2IsQ0FBYixFQUFnQmEsQ0FBQyxHQUFHakIsQ0FBcEIsRUFBdUJpQixDQUFDLEVBQXhCLEVBQTRCO0FBQ3hCUixRQUFBQSxHQUFHLENBQUNRLENBQUQsQ0FBSCxHQUFTUixHQUFHLENBQUNRLENBQUMsR0FBQyxDQUFILENBQVo7QUFDSDs7QUFDRFIsTUFBQUEsR0FBRyxDQUFDVCxDQUFELENBQUgsR0FBU2dCLElBQVQ7QUFDSDs7QUFDRGhCLElBQUFBLENBQUM7QUFDREksSUFBQUEsQ0FBQztBQUNKO0FBQ0o7O0FBRUQsU0FBU0csWUFBVCxDQUFzQkUsR0FBdEIsRUFBMkJRLENBQTNCLEVBQThCUCxLQUE5QixFQUFxQ0MsR0FBckMsRUFBMEM7QUFDdEMsTUFBSUQsS0FBSyxHQUFHQyxHQUFaLEVBQWlCO0FBRWpCLE1BQUlDLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVcsQ0FBQ0osS0FBSyxHQUFHQyxHQUFULElBQWMsQ0FBekIsQ0FBVjtBQUNBLE1BQUlGLEdBQUcsQ0FBQ0csR0FBRCxDQUFILEtBQWFLLENBQWpCLEVBQW9CLE9BQU9MLEdBQVA7O0FBRXBCLE1BQUdILEdBQUcsQ0FBQ0csR0FBRCxDQUFILEdBQVdLLENBQWQsRUFBaUI7QUFDYixXQUFPVixZQUFZLENBQUNFLEdBQUQsRUFBTVEsQ0FBTixFQUFTUCxLQUFULEVBQWdCRSxHQUFHLEdBQUMsQ0FBcEIsQ0FBbkI7QUFDSCxHQUZELE1BRU87QUFDSCxXQUFPTCxZQUFZLENBQUNFLEdBQUQsRUFBTVEsQ0FBTixFQUFTTCxHQUFHLEdBQUMsQ0FBYixFQUFnQkQsR0FBaEIsQ0FBbkI7QUFDSDtBQUNKOztBQUVELElBQUlPLENBQUMsR0FBR3hCLGFBQWEsQ0FBQyxFQUFELEVBQUssQ0FBQyxDQUFELEVBQUcsRUFBSCxFQUFNLEVBQU4sRUFBUyxFQUFULEVBQVksRUFBWixDQUFMLENBQXJCO0FBQ0F5QixPQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBWiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvaml0ZW5kcmEvRG9jdW1lbnRzL3Byb2plY3RzL0NyYWNraW5nX1RoZV9Db2RpbmdfSW50ZXJ2aWV3Iiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gSURzT2ZQYWNrYWdlcyhyaWRlRHVyYXRpb24sIHNvbmdEdXJhdGlvbnMpXG57XG4gICAgLy8gV1JJVEUgWU9VUiBDT0RFIEhFUkVcbiAgICAvLyBQSUNLIHBhaXIgd2hpY2ggZXhhY3RseSBlbmRzIGJlZm9yZSAzMCBzZWNvbmRzXG4gICAgLy8gaWYgbXVsdGlwbGUgcGFpcnMgZXhpc3RzLCB0aGVuIHBpY2sgcGFpciB3aXRoIGxvbmdlc3Qgc29uZ0R1cmF0aW9uc1xuICAgIC8vIGZpbmQgcGFpciB3aXRoIHN1bSBleGFjdGx5IGNvbWJpbmVkRHVyYXRpb25cbiAgICBsZXQgcGFpciA9IFtdO1xuICAgIGxldCBjb21iaW5lZER1cmF0aW9uID0gcmlkZUR1cmF0aW9uIC0gMzA7XG4gICAgbGV0IHNvcnRlZFNvbmdEdXJhdGlvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvbmdEdXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc29ydGVkU29uZ0R1cmF0aW9ucy5wdXNoKHNvbmdEdXJhdGlvbnNbaV0pO1xuICAgIH1cblxuICAgIC8vIGZpcnN0IHNvcnQgdGhlIHNvbmdEdXJhdGlvbnNcblxuICAgIG1lcmdlU29ydChzb3J0ZWRTb25nRHVyYXRpb25zKTtcblxuICAgIC8vIGxvb3AgdGhyb3VnaCB0aGUgc29ydGVkU29uZ0R1cmF0aW9ucyBmcm9tIHRoZSBiYWNrIGFuZCB0aGVuIGRvIGEgYmluYXJ5IHNlYXJjaCBzbyB0aGF0XG4gICAgLy8gdGhlIHN1bSBvZiB0aGUgcGFpciBpcyBjb21iaW5lZER1cmF0aW9uLCBzbyB0aGF0IHRoZSB0aW1lIGNvbXBsZXhpdHkgaXMgbiAqIGxvZyhuKVxuICAgIC8vIG4gZm9yIGxvb3BpbmcgdGhyb3VnaCBsaXN0LCBsb2cobikgZm9yIGJpbmFyeSBzZWFyY2hcblxuICAgIGZvciAobGV0IGogPSBzb3J0ZWRTb25nRHVyYXRpb25zLmxlbmd0aCAtIDE7IGogPjA7IGotLSkge1xuICAgICAgICBpZiAoc29ydGVkU29uZ0R1cmF0aW9uc1tqXSA8IGNvbWJpbmVkRHVyYXRpb24pIHtcbiAgICAgICAgICAgIGxldCByZW1haW5pbmdUaW1lID0gY29tYmluZWREdXJhdGlvbiAtIHNvcnRlZFNvbmdEdXJhdGlvbnNbal07XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBiaW5hcnlTZWFyY2goc29ydGVkU29uZ0R1cmF0aW9ucywgcmVtYWluaW5nVGltZSwgMCwgaiAtIDEpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcGFpclswXSA9IHNvbmdEdXJhdGlvbnMuaW5kZXhPZihzb3J0ZWRTb25nRHVyYXRpb25zW21hdGNoXSk7XG4gICAgICAgICAgICAgICAgcGFpclsxXSA9IHNvbmdEdXJhdGlvbnMuaW5kZXhPZihzb3J0ZWRTb25nRHVyYXRpb25zW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYWlyO1xuXG59XG4vLyBGVU5DVElPTiBTSUdOQVRVUkUgRU5EU1xuXG5mdW5jdGlvbiBtZXJnZVNvcnQoYXJyLCBzdGFydCA9IDAsIGVuZCA9IGFyci5sZW5ndGggLSAxKSB7XG4gICAgbGV0IG1pZCA9IE1hdGguZmxvb3IoKGVuZCArIHN0YXJ0KS8yKTtcbiAgICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgbWVyZ2VTb3J0KGFyciwgc3RhcnQsIG1pZCk7XG4gICAgICAgIG1lcmdlU29ydChhcnIsIG1pZCsxLCBlbmQpO1xuICAgICAgICBtZXJnZShhcnIsIHN0YXJ0LCBtaWQsIGVuZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZShhcnIsIHN0YXJ0LCBtaWQsIGVuZCkge1xuICAgIGxldCBpID0gc3RhcnQ7XG4gICAgbGV0IGogPSBtaWQrMTtcblxuICAgIHdoaWxlIChpIDwgZW5kICYmIGogPD0gZW5kKSB7XG4gICAgICAgIGlmIChhcnJbaV0gPCBhcnJbal0pIHtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gYXJyW2pdO1xuICAgICAgICAgICAgZm9yIChsZXQgayA9IGo7IGsgPiBpOyBrLS0pIHtcbiAgICAgICAgICAgICAgICBhcnJba10gPSBhcnJbay0xXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFycltpXSA9IHRlbXA7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgICAgICBqKys7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2goYXJyLCBrLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm47XG5cbiAgICBsZXQgbWlkID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpLzIpO1xuICAgIGlmIChhcnJbbWlkXSA9PT0gaykgcmV0dXJuIG1pZDtcblxuICAgIGlmKGFyclttaWRdID4gaykge1xuICAgICAgICByZXR1cm4gYmluYXJ5U2VhcmNoKGFyciwgaywgc3RhcnQsIG1pZC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYmluYXJ5U2VhcmNoKGFyciwgaywgbWlkKzEsIGVuZCk7XG4gICAgfVxufVxuXG5sZXQgeCA9IElEc09mUGFja2FnZXMoOTAsIFsxLDEwLDI1LDM1LDYwXSk7XG5jb25zb2xlLmxvZyh4KTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "binary-search.js"
      ],
      "names": [
        "IDsOfPackages",
        "rideDuration",
        "songDurations",
        "pair",
        "combinedDuration",
        "sortedSongDurations",
        "i",
        "length",
        "push",
        "mergeSort",
        "j",
        "remainingTime",
        "match",
        "binarySearch",
        "indexOf",
        "arr",
        "start",
        "end",
        "mid",
        "Math",
        "floor",
        "merge",
        "temp",
        "k",
        "x",
        "console",
        "log"
      ],
      "mappings": ";;AAAA,SAASA,aAAT,CAAuBC,YAAvB,EAAqCC,aAArC,EACA;AACI;AACA;AACA;AACA;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,gBAAgB,GAAGH,YAAY,GAAG,EAAtC;AACA,MAAII,mBAAmB,GAAG,EAA1B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAAa,CAACK,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC3CD,IAAAA,mBAAmB,CAACG,IAApB,CAAyBN,aAAa,CAACI,CAAD,CAAtC;AACH,GAVL,CAYI;;;AAEAG,EAAAA,SAAS,CAACJ,mBAAD,CAAT,CAdJ,CAgBI;AACA;AACA;;AAEA,OAAK,IAAIK,CAAC,GAAGL,mBAAmB,CAACE,MAApB,GAA6B,CAA1C,EAA6CG,CAAC,GAAE,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACpD,QAAIL,mBAAmB,CAACK,CAAD,CAAnB,GAAyBN,gBAA7B,EAA+C;AAC3C,UAAIO,aAAa,GAAGP,gBAAgB,GAAGC,mBAAmB,CAACK,CAAD,CAA1D;AACA,UAAIE,KAAK,GAAGC,YAAY,CAACR,mBAAD,EAAsBM,aAAtB,EAAqC,CAArC,EAAwCD,CAAC,GAAG,CAA5C,CAAxB;;AACA,UAAIE,KAAJ,EAAW;AACPT,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUD,aAAa,CAACY,OAAd,CAAsBT,mBAAmB,CAACO,KAAD,CAAzC,CAAV;AACAT,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUD,aAAa,CAACY,OAAd,CAAsBT,mBAAmB,CAACK,CAAD,CAAzC,CAAV;AACH;AACJ;AACJ;;AAED,SAAOP,IAAP;AAEH,C,CACD;;;AAEA,SAASM,SAAT,CAAmBM,GAAnB,EAAyD;AAAA,MAAjCC,KAAiC,uEAAzB,CAAyB;AAAA,MAAtBC,GAAsB,uEAAhBF,GAAG,CAACR,MAAJ,GAAa,CAAG;AACrD,MAAIW,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACH,GAAG,GAAGD,KAAP,IAAc,CAAzB,CAAV;;AACA,MAAIA,KAAK,GAAGC,GAAZ,EAAiB;AACbR,IAAAA,SAAS,CAACM,GAAD,EAAMC,KAAN,EAAaE,GAAb,CAAT;AACAT,IAAAA,SAAS,CAACM,GAAD,EAAMG,GAAG,GAAC,CAAV,EAAaD,GAAb,CAAT;AACAI,IAAAA,KAAK,CAACN,GAAD,EAAMC,KAAN,EAAaE,GAAb,EAAkBD,GAAlB,CAAL;AACH;AACJ;;AAED,SAASI,KAAT,CAAeN,GAAf,EAAoBC,KAApB,EAA2BE,GAA3B,EAAgCD,GAAhC,EAAqC;AACjC,MAAIX,CAAC,GAAGU,KAAR;AACA,MAAIN,CAAC,GAAGQ,GAAG,GAAC,CAAZ;;AAEA,SAAOZ,CAAC,GAAGW,GAAJ,IAAWP,CAAC,IAAIO,GAAvB,EAA4B;AACxB,QAAIF,GAAG,CAACT,CAAD,CAAH,GAASS,GAAG,CAACL,CAAD,CAAhB,EAAqB;AACjBJ,MAAAA,CAAC;AACJ,KAFD,MAEO;AACH,UAAIgB,IAAI,GAAGP,GAAG,CAACL,CAAD,CAAd;;AACA,WAAK,IAAIa,CAAC,GAAGb,CAAb,EAAgBa,CAAC,GAAGjB,CAApB,EAAuBiB,CAAC,EAAxB,EAA4B;AACxBR,QAAAA,GAAG,CAACQ,CAAD,CAAH,GAASR,GAAG,CAACQ,CAAC,GAAC,CAAH,CAAZ;AACH;;AACDR,MAAAA,GAAG,CAACT,CAAD,CAAH,GAASgB,IAAT;AACH;;AACDhB,IAAAA,CAAC;AACDI,IAAAA,CAAC;AACJ;AACJ;;AAED,SAASG,YAAT,CAAsBE,GAAtB,EAA2BQ,CAA3B,EAA8BP,KAA9B,EAAqCC,GAArC,EAA0C;AACtC,MAAID,KAAK,GAAGC,GAAZ,EAAiB;AAEjB,MAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,KAAK,GAAGC,GAAT,IAAc,CAAzB,CAAV;AACA,MAAIF,GAAG,CAACG,GAAD,CAAH,KAAaK,CAAjB,EAAoB,OAAOL,GAAP;;AAEpB,MAAGH,GAAG,CAACG,GAAD,CAAH,GAAWK,CAAd,EAAiB;AACb,WAAOV,YAAY,CAACE,GAAD,EAAMQ,CAAN,EAASP,KAAT,EAAgBE,GAAG,GAAC,CAApB,CAAnB;AACH,GAFD,MAEO;AACH,WAAOL,YAAY,CAACE,GAAD,EAAMQ,CAAN,EAASL,GAAG,GAAC,CAAb,EAAgBD,GAAhB,CAAnB;AACH;AACJ;;AAED,IAAIO,CAAC,GAAGxB,aAAa,CAAC,EAAD,EAAK,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,EAAS,EAAT,EAAY,EAAZ,CAAL,CAArB;AACAyB,OAAO,CAACC,GAAR,CAAYF,CAAZ",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourcesContent": [
        "function IDsOfPackages(rideDuration, songDurations)\n{\n    // WRITE YOUR CODE HERE\n    // PICK pair which exactly ends before 30 seconds\n    // if multiple pairs exists, then pick pair with longest songDurations\n    // find pair with sum exactly combinedDuration\n    let pair = [];\n    let combinedDuration = rideDuration - 30;\n    let sortedSongDurations = [];\n    for (let i = 0; i < songDurations.length; i++) {\n        sortedSongDurations.push(songDurations[i]);\n    }\n\n    // first sort the songDurations\n\n    mergeSort(sortedSongDurations);\n\n    // loop through the sortedSongDurations from the back and then do a binary search so that\n    // the sum of the pair is combinedDuration, so that the time complexity is n * log(n)\n    // n for looping through list, log(n) for binary search\n\n    for (let j = sortedSongDurations.length - 1; j >0; j--) {\n        if (sortedSongDurations[j] < combinedDuration) {\n            let remainingTime = combinedDuration - sortedSongDurations[j];\n            let match = binarySearch(sortedSongDurations, remainingTime, 0, j - 1);\n            if (match) {\n                pair[0] = songDurations.indexOf(sortedSongDurations[match]);\n                pair[1] = songDurations.indexOf(sortedSongDurations[j]);\n            }\n        }\n    }\n\n    return pair;\n\n}\n// FUNCTION SIGNATURE ENDS\n\nfunction mergeSort(arr, start = 0, end = arr.length - 1) {\n    let mid = Math.floor((end + start)/2);\n    if (start < end) {\n        mergeSort(arr, start, mid);\n        mergeSort(arr, mid+1, end);\n        merge(arr, start, mid, end);\n    }\n}\n\nfunction merge(arr, start, mid, end) {\n    let i = start;\n    let j = mid+1;\n\n    while (i < end && j <= end) {\n        if (arr[i] < arr[j]) {\n            i++;\n        } else {\n            let temp = arr[j];\n            for (let k = j; k > i; k--) {\n                arr[k] = arr[k-1];\n            }\n            arr[i] = temp;\n        }\n        i++;\n        j++;\n    }\n}\n\nfunction binarySearch(arr, k, start, end) {\n    if (start > end) return;\n\n    let mid = Math.floor((start + end)/2);\n    if (arr[mid] === k) return mid;\n\n    if(arr[mid] > k) {\n        return binarySearch(arr, k, start, mid-1);\n    } else {\n        return binarySearch(arr, k, mid+1, end);\n    }\n}\n\nlet x = IDsOfPackages(90, [1,10,25,35,60]);\nconsole.log(x);"
      ]
    },
    "sourceType": "script",
    "mtime": 1559780057985
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/optimal-utilization.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/optimal-utilization.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/optimal-utilization.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/optimal-utilization.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src",
        "sourceFileName": "optimal-utilization.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction optimalUtilization(maxTravelDist, forwardRouteList, returnRouteList) {\n  // WRITE YOUR CODE HERE\n  var bestPair = [];\n  var bestSum = 0;\n\n  for (var i = 0; i < forwardRouteList.length; i++) {\n    for (var j = 0; j < returnRouteList.length; j++) {\n      var travelingDist = forwardRouteList[i][1] + returnRouteList[j][1];\n\n      if (travelingDist < maxTravelDist && travelingDist > bestSum) {\n        bestPair[0] = i;\n        bestPair[1] = j;\n        bestSum = travelingDist;\n      }\n    }\n  }\n\n  return bestPair;\n}\n\noptimalUtilization(7000, [[1, 2000], [2, 4000], [3, 6000]], [[1, 2000]]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm9wdGltYWwtdXRpbGl6YXRpb24uanMiXSwibmFtZXMiOlsib3B0aW1hbFV0aWxpemF0aW9uIiwibWF4VHJhdmVsRGlzdCIsImZvcndhcmRSb3V0ZUxpc3QiLCJyZXR1cm5Sb3V0ZUxpc3QiLCJiZXN0UGFpciIsImJlc3RTdW0iLCJpIiwibGVuZ3RoIiwiaiIsInRyYXZlbGluZ0Rpc3QiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0Esa0JBQVQsQ0FBNEJDLGFBQTVCLEVBQTJDQyxnQkFBM0MsRUFBNkRDLGVBQTdELEVBQ0E7QUFDSTtBQUNBLE1BQUlDLFFBQVEsR0FBRyxFQUFmO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLENBQWQ7O0FBQ0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixnQkFBZ0IsQ0FBQ0ssTUFBckMsRUFBNkNELENBQUMsRUFBOUMsRUFBa0Q7QUFDOUMsU0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHTCxlQUFlLENBQUNJLE1BQXBDLEVBQTRDQyxDQUFDLEVBQTdDLEVBQWlEO0FBQzdDLFVBQUlDLGFBQWEsR0FBR1AsZ0JBQWdCLENBQUNJLENBQUQsQ0FBaEIsQ0FBb0IsQ0FBcEIsSUFBeUJILGVBQWUsQ0FBQ0ssQ0FBRCxDQUFmLENBQW1CLENBQW5CLENBQTdDOztBQUNBLFVBQUlDLGFBQWEsR0FBR1IsYUFBaEIsSUFDQVEsYUFBYSxHQUFHSixPQURwQixFQUM2QjtBQUN6QkQsUUFBQUEsUUFBUSxDQUFDLENBQUQsQ0FBUixHQUFjRSxDQUFkO0FBQ0FGLFFBQUFBLFFBQVEsQ0FBQyxDQUFELENBQVIsR0FBY0ksQ0FBZDtBQUNBSCxRQUFBQSxPQUFPLEdBQUdJLGFBQVY7QUFDSDtBQUNKO0FBQ0o7O0FBRUQsU0FBT0wsUUFBUDtBQUNIOztBQUVESixrQkFBa0IsQ0FBQyxJQUFELEVBQU8sQ0FBQyxDQUFDLENBQUQsRUFBRyxJQUFILENBQUQsRUFBVyxDQUFDLENBQUQsRUFBSSxJQUFKLENBQVgsRUFBc0IsQ0FBQyxDQUFELEVBQUksSUFBSixDQUF0QixDQUFQLEVBQXlDLENBQUMsQ0FBQyxDQUFELEVBQUcsSUFBSCxDQUFELENBQXpDLENBQWxCIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9qaXRlbmRyYS9Eb2N1bWVudHMvcHJvamVjdHMvQ3JhY2tpbmdfVGhlX0NvZGluZ19JbnRlcnZpZXcvc3JjIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gb3B0aW1hbFV0aWxpemF0aW9uKG1heFRyYXZlbERpc3QsIGZvcndhcmRSb3V0ZUxpc3QsIHJldHVyblJvdXRlTGlzdClcbntcbiAgICAvLyBXUklURSBZT1VSIENPREUgSEVSRVxuICAgIGxldCBiZXN0UGFpciA9IFtdO1xuICAgIGxldCBiZXN0U3VtID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvcndhcmRSb3V0ZUxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCByZXR1cm5Sb3V0ZUxpc3QubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGxldCB0cmF2ZWxpbmdEaXN0ID0gZm9yd2FyZFJvdXRlTGlzdFtpXVsxXSArIHJldHVyblJvdXRlTGlzdFtqXVsxXTtcbiAgICAgICAgICAgIGlmICh0cmF2ZWxpbmdEaXN0IDwgbWF4VHJhdmVsRGlzdCAmJlxuICAgICAgICAgICAgICAgIHRyYXZlbGluZ0Rpc3QgPiBiZXN0U3VtKSB7XG4gICAgICAgICAgICAgICAgYmVzdFBhaXJbMF0gPSBpO1xuICAgICAgICAgICAgICAgIGJlc3RQYWlyWzFdID0gajtcbiAgICAgICAgICAgICAgICBiZXN0U3VtID0gdHJhdmVsaW5nRGlzdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiZXN0UGFpcjtcbn1cblxub3B0aW1hbFV0aWxpemF0aW9uKDcwMDAsIFtbMSwyMDAwXSwgWzIsIDQwMDBdLCBbMywgNjAwMF1dLCBbWzEsMjAwMF1dKTsiXX0=",
    "map": {
      "version": 3,
      "sources": [
        "optimal-utilization.js"
      ],
      "names": [
        "optimalUtilization",
        "maxTravelDist",
        "forwardRouteList",
        "returnRouteList",
        "bestPair",
        "bestSum",
        "i",
        "length",
        "j",
        "travelingDist"
      ],
      "mappings": ";;AAAA,SAASA,kBAAT,CAA4BC,aAA5B,EAA2CC,gBAA3C,EAA6DC,eAA7D,EACA;AACI;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,OAAO,GAAG,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACK,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAC9C,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,eAAe,CAACI,MAApC,EAA4CC,CAAC,EAA7C,EAAiD;AAC7C,UAAIC,aAAa,GAAGP,gBAAgB,CAACI,CAAD,CAAhB,CAAoB,CAApB,IAAyBH,eAAe,CAACK,CAAD,CAAf,CAAmB,CAAnB,CAA7C;;AACA,UAAIC,aAAa,GAAGR,aAAhB,IACAQ,aAAa,GAAGJ,OADpB,EAC6B;AACzBD,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcE,CAAd;AACAF,QAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcI,CAAd;AACAH,QAAAA,OAAO,GAAGI,aAAV;AACH;AACJ;AACJ;;AAED,SAAOL,QAAP;AACH;;AAEDJ,kBAAkB,CAAC,IAAD,EAAO,CAAC,CAAC,CAAD,EAAG,IAAH,CAAD,EAAW,CAAC,CAAD,EAAI,IAAJ,CAAX,EAAsB,CAAC,CAAD,EAAI,IAAJ,CAAtB,CAAP,EAAyC,CAAC,CAAC,CAAD,EAAG,IAAH,CAAD,CAAzC,CAAlB",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src",
      "sourcesContent": [
        "function optimalUtilization(maxTravelDist, forwardRouteList, returnRouteList)\n{\n    // WRITE YOUR CODE HERE\n    let bestPair = [];\n    let bestSum = 0;\n    for (let i = 0; i < forwardRouteList.length; i++) {\n        for (let j = 0; j < returnRouteList.length; j++) {\n            let travelingDist = forwardRouteList[i][1] + returnRouteList[j][1];\n            if (travelingDist < maxTravelDist &&\n                travelingDist > bestSum) {\n                bestPair[0] = i;\n                bestPair[1] = j;\n                bestSum = travelingDist;\n            }\n        }\n    }\n\n    return bestPair;\n}\n\noptimalUtilization(7000, [[1,2000], [2, 4000], [3, 6000]], [[1,2000]]);"
      ]
    },
    "sourceType": "script",
    "mtime": 1559781986201
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/zero-matrix.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/zero-matrix.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/zero-matrix.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/zero-matrix.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "zero-matrix.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\n/**\n * Given a matrix M*N find all zeros in it and mark corresponding row and column of zero element accordinngly\n * @param arr\n */\nfunction preProcessMatrix(arr) {\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      // if an element in the matrix is 0\n      if (arr[i][j] === 0) {\n        // if element is (2,3), then mark (2,0) as row and (0,3) as col, meaning in next run mark entire 2nd row as zeros and\n        // entire 3rd column as zeros\n        if (!(i === 0 && j === 0)) {\n          arr[i][0] = typeOfCell.ROW;\n          arr[0][j] = typeOfCell.COL;\n        } // if element (0,0) = 0, mark it as row_col, meaning to mark entire 0th row and 0th column zero\n        else {\n            arr[i][j] = typeOfCell.ROW_COL;\n          }\n      }\n    }\n  }\n}\n\nfunction zeroMatrix(arr) {\n  preProcessMatrix(arr);\n  console.log('matrix after pre processing is ', arr);\n  markMatrixZero(arr);\n  console.log('final matrix after zeroing is ', arr);\n}\n\nfunction markMatrixZero(arr) {\n  for (var i = 0; i < arr.length; i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      if (arr[i][j] === 'row') {\n        markRowZero(arr, i);\n        break;\n      } else if (arr[i][j] === 'col') {\n        markColumnZero(arr, j);\n      } else {\n        markRowColumnZero(arr);\n      }\n    }\n  }\n}\n\nfunction markRowZero(arr, i) {\n  for (var j = 0; j < arr[i].length; j++) {\n    // mark every element in row 0 except the ones which are marked as row, col or row_col\n    var ele = arr[i][j];\n    if (notASpecialTypeOfCell(ele)) arr[i][j] = 0;\n  }\n\n  arr[i][0] = 0;\n}\n\nfunction markColumnZero(arr, j) {\n  for (var i = 0; i < arr.length; i++) {\n    var ele = arr[i][j];\n    if (notASpecialTypeOfCell(ele)) arr[i][j] = 0;\n  }\n\n  arr[0][j] = 0;\n}\n\nfunction markRowColumnZero(arr) {\n  for (var i = 0; i < arr.length; i++) {\n    var ele = arr[i][0];\n    if (notASpecialTypeOfCell(ele)) arr[i][0] = 0;\n  }\n\n  for (var j = 0; j < arr[0].length; j++) {\n    var _ele = arr[0][j];\n    if (notASpecialTypeOfCell(_ele)) arr[0][j] = 0;\n  }\n\n  arr[0][0] = 0;\n}\n\nfunction notASpecialTypeOfCell(ele) {\n  return ele !== typeOfCell.ROW && ele !== typeOfCell.COL && ele !== typeOfCell.ROW_COL;\n}\n\nvar arr = [[0, 2, 3], [0, 5, 6], [7, 8, 9], [10, 11, 12]];\nvar typeOfCell = {\n  ROW: 'row',\n  COL: 'col',\n  ROW_COL: 'row_col'\n};\nzeroMatrix(arr); //console.log(arr[0].length);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "zero-matrix.js"
      ],
      "names": [
        "preProcessMatrix",
        "arr",
        "i",
        "length",
        "j",
        "typeOfCell",
        "ROW",
        "COL",
        "ROW_COL",
        "zeroMatrix",
        "console",
        "log",
        "markMatrixZero",
        "markRowZero",
        "markColumnZero",
        "markRowColumnZero",
        "ele",
        "notASpecialTypeOfCell"
      ],
      "mappings": ";;AAAA;;;;AAIA,SAASA,gBAAT,CAA0BC,GAA1B,EAA+B;AAC3B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACC,CAAD,CAAH,CAAOC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC;AACA,UAAIH,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,MAAc,CAAlB,EAAqB;AACjB;AACA;AACA,YAAI,EAAEF,CAAC,KAAK,CAAN,IAAWE,CAAC,KAAK,CAAnB,CAAJ,EAA2B;AACvBH,UAAAA,GAAG,CAACC,CAAD,CAAH,CAAO,CAAP,IAAYG,UAAU,CAACC,GAAvB;AACAL,UAAAA,GAAG,CAAC,CAAD,CAAH,CAAOG,CAAP,IAAYC,UAAU,CAACE,GAAvB;AACH,SAHD,CAIA;AAJA,aAKK;AACDN,YAAAA,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,IAAYC,UAAU,CAACG,OAAvB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,SAASC,UAAT,CAAoBR,GAApB,EAAyB;AACrBD,EAAAA,gBAAgB,CAACC,GAAD,CAAhB;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CV,GAA/C;AACAW,EAAAA,cAAc,CAACX,GAAD,CAAd;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CV,GAA9C;AACH;;AAED,SAASW,cAAT,CAAwBX,GAAxB,EAA6B;AACzB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACC,CAAD,CAAH,CAAOC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC,UAAIH,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,MAAc,KAAlB,EAAyB;AACrBS,QAAAA,WAAW,CAACZ,GAAD,EAAMC,CAAN,CAAX;AACA;AACH,OAHD,MAGO,IAAID,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,MAAc,KAAlB,EAAyB;AAC5BU,QAAAA,cAAc,CAACb,GAAD,EAAMG,CAAN,CAAd;AACH,OAFM,MAEA;AACHW,QAAAA,iBAAiB,CAACd,GAAD,CAAjB;AACH;AACJ;AACJ;AACJ;;AAED,SAASY,WAAT,CAAqBZ,GAArB,EAA0BC,CAA1B,EAA6B;AACzB,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACC,CAAD,CAAH,CAAOC,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC;AACA,QAAMY,GAAG,GAAGf,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,CAAZ;AACA,QAAIa,qBAAqB,CAACD,GAAD,CAAzB,EACAf,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,IAAY,CAAZ;AACH;;AACDH,EAAAA,GAAG,CAACC,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACH;;AAED,SAASY,cAAT,CAAwBb,GAAxB,EAA6BG,CAA7B,EAAgC;AAC5B,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAMc,GAAG,GAAGf,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,CAAZ;AACA,QAAIa,qBAAqB,CAACD,GAAD,CAAzB,EACAf,GAAG,CAACC,CAAD,CAAH,CAAOE,CAAP,IAAY,CAAZ;AACH;;AACDH,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAOG,CAAP,IAAY,CAAZ;AACH;;AAED,SAASW,iBAAT,CAA2Bd,GAA3B,EAAgC;AAC5B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjC,QAAMc,GAAG,GAAGf,GAAG,CAACC,CAAD,CAAH,CAAO,CAAP,CAAZ;AACA,QAAIe,qBAAqB,CAACD,GAAD,CAAzB,EACAf,GAAG,CAACC,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACH;;AACD,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAAC,CAAD,CAAH,CAAOE,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACpC,QAAMY,IAAG,GAAGf,GAAG,CAAC,CAAD,CAAH,CAAOG,CAAP,CAAZ;AACA,QAAIa,qBAAqB,CAACD,IAAD,CAAzB,EACAf,GAAG,CAAC,CAAD,CAAH,CAAOG,CAAP,IAAY,CAAZ;AACH;;AACDH,EAAAA,GAAG,CAAC,CAAD,CAAH,CAAO,CAAP,IAAY,CAAZ;AACH;;AAED,SAASgB,qBAAT,CAA+BD,GAA/B,EAAoC;AAChC,SAAOA,GAAG,KAAKX,UAAU,CAACC,GAAnB,IAA0BU,GAAG,KAAKX,UAAU,CAACE,GAA7C,IAAoDS,GAAG,KAAKX,UAAU,CAACG,OAA9E;AACH;;AAED,IAAMP,GAAG,GAAG,CACR,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADQ,EAER,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAFQ,EAGR,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAHQ,EAIR,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAJQ,CAAZ;AAOA,IAAMI,UAAU,GAAG;AACfC,EAAAA,GAAG,EAAE,KADU;AAEfC,EAAAA,GAAG,EAAE,KAFU;AAGfC,EAAAA,OAAO,EAAE;AAHM,CAAnB;AAMAC,UAAU,CAACR,GAAD,CAAV,C,CACA",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "/**\n * Given a matrix M*N find all zeros in it and mark corresponding row and column of zero element accordinngly\n * @param arr\n */\nfunction preProcessMatrix(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n            // if an element in the matrix is 0\n            if (arr[i][j] === 0) {\n                // if element is (2,3), then mark (2,0) as row and (0,3) as col, meaning in next run mark entire 2nd row as zeros and\n                // entire 3rd column as zeros\n                if (!(i === 0 && j === 0)) {\n                    arr[i][0] = typeOfCell.ROW;\n                    arr[0][j] = typeOfCell.COL;\n                }\n                // if element (0,0) = 0, mark it as row_col, meaning to mark entire 0th row and 0th column zero\n                else {\n                    arr[i][j] = typeOfCell.ROW_COL;\n                }\n            }\n        }\n    }\n}\n\nfunction zeroMatrix(arr) {\n    preProcessMatrix(arr);\n    console.log('matrix after pre processing is ', arr);\n    markMatrixZero(arr);\n    console.log('final matrix after zeroing is ', arr);\n}\n\nfunction markMatrixZero(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr[i].length; j++) {\n            if (arr[i][j] === 'row') {\n                markRowZero(arr, i);\n                break;\n            } else if (arr[i][j] === 'col') {\n                markColumnZero(arr, j);\n            } else {\n                markRowColumnZero(arr);\n            }\n        }\n    }\n}\n\nfunction markRowZero(arr, i) {\n    for (let j = 0; j < arr[i].length; j++) {\n        // mark every element in row 0 except the ones which are marked as row, col or row_col\n        const ele = arr[i][j];\n        if (notASpecialTypeOfCell(ele))\n        arr[i][j] = 0;\n    }\n    arr[i][0] = 0;\n}\n\nfunction markColumnZero(arr, j) {\n    for (let i = 0; i < arr.length; i++) {\n        const ele = arr[i][j];\n        if (notASpecialTypeOfCell(ele))\n        arr[i][j] = 0;\n    }\n    arr[0][j] = 0;\n}\n\nfunction markRowColumnZero(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        const ele = arr[i][0];\n        if (notASpecialTypeOfCell(ele))\n        arr[i][0] = 0;\n    }\n    for (let j = 0; j < arr[0].length; j++) {\n        const ele = arr[0][j];\n        if (notASpecialTypeOfCell(ele))\n        arr[0][j] = 0;\n    }\n    arr[0][0] = 0;\n}\n\nfunction notASpecialTypeOfCell(ele) {\n    return ele !== typeOfCell.ROW && ele !== typeOfCell.COL && ele !== typeOfCell.ROW_COL;\n}\n\nconst arr = [\n    [0,2,3],\n    [0,5,6],\n    [7,8,9],\n    [10,11,12]\n];\n\nconst typeOfCell = {\n    ROW: 'row',\n    COL: 'col',\n    ROW_COL: 'row_col'\n};\n\nzeroMatrix(arr);\n//console.log(arr[0].length);"
      ]
    },
    "sourceType": "script",
    "mtime": 1562265216697
  },
  "{\"sourceRoot\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"filename\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/string-rotation.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.5": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/string-rotation.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/string-rotation.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings/string-rotation.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
        "sourceFileName": "string-rotation.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar str = 'erbottlewat';\nvar str1 = 'waterbottle';\nvar regex = RegExp(str1);\nvar concatStr = str + str;\nconsole.log(str.length === str1.length && regex.test(concatStr));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZy1yb3RhdGlvbi5qcyJdLCJuYW1lcyI6WyJzdHIiLCJzdHIxIiwicmVnZXgiLCJSZWdFeHAiLCJjb25jYXRTdHIiLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwidGVzdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxHQUFHLEdBQUcsYUFBWjtBQUNBLElBQU1DLElBQUksR0FBRyxhQUFiO0FBQ0EsSUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNGLElBQUQsQ0FBcEI7QUFDQSxJQUFNRyxTQUFTLEdBQUdKLEdBQUcsR0FBR0EsR0FBeEI7QUFDQUssT0FBTyxDQUFDQyxHQUFSLENBQVlOLEdBQUcsQ0FBQ08sTUFBSixLQUFlTixJQUFJLENBQUNNLE1BQXBCLElBQThCTCxLQUFLLENBQUNNLElBQU4sQ0FBV0osU0FBWCxDQUExQyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvaml0ZW5kcmEvRG9jdW1lbnRzL3Byb2plY3RzL0NyYWNraW5nX1RoZV9Db2RpbmdfSW50ZXJ2aWV3L3NyYy9hcnJheXMtYW5kLXN0cmluZ3MiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzdHIgPSAnZXJib3R0bGV3YXQnO1xuY29uc3Qgc3RyMSA9ICd3YXRlcmJvdHRsZSc7XG5jb25zdCByZWdleCA9IFJlZ0V4cChzdHIxKTtcbmNvbnN0IGNvbmNhdFN0ciA9IHN0ciArIHN0cjtcbmNvbnNvbGUubG9nKHN0ci5sZW5ndGggPT09IHN0cjEubGVuZ3RoICYmIHJlZ2V4LnRlc3QoY29uY2F0U3RyKSk7XG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "string-rotation.js"
      ],
      "names": [
        "str",
        "str1",
        "regex",
        "RegExp",
        "concatStr",
        "console",
        "log",
        "length",
        "test"
      ],
      "mappings": ";;AAAA,IAAMA,GAAG,GAAG,aAAZ;AACA,IAAMC,IAAI,GAAG,aAAb;AACA,IAAMC,KAAK,GAAGC,MAAM,CAACF,IAAD,CAApB;AACA,IAAMG,SAAS,GAAGJ,GAAG,GAAGA,GAAxB;AACAK,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,MAAJ,KAAeN,IAAI,CAACM,MAApB,IAA8BL,KAAK,CAACM,IAAN,CAAWJ,SAAX,CAA1C",
      "sourceRoot": "/Users/jitendra/Documents/projects/Cracking_The_Coding_Interview/src/arrays-and-strings",
      "sourcesContent": [
        "const str = 'erbottlewat';\nconst str1 = 'waterbottle';\nconst regex = RegExp(str1);\nconst concatStr = str + str;\nconsole.log(str.length === str1.length && regex.test(concatStr));\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1562286334549
  }
}